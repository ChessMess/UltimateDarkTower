{
  "version": 3,
  "sources": ["../../../src/Logger.ts", "../../../src/constants.ts", "../../../src/udtTowerResponse.ts", "../../../src/udtBleConnection.ts", "../../../src/udtCommandFactory.ts", "../../../src/udtTowerCommands.ts", "../../../src/UltimateDarkTower.ts", "../../../src/index.ts", "../../../examples/controller/TowerController.ts"],
  "sourcesContent": ["export type LogLevel = 'all' | 'debug' | 'info' | 'warn' | 'error';\n\nexport interface LogOutput {\n    write(level: LogLevel, message: string, timestamp: Date): void;\n}\n\nexport class ConsoleOutput implements LogOutput {\n    write(level: LogLevel, message: string, timestamp: Date): void {\n        switch (level) {\n            case 'debug':\n                console.debug(message);\n                break;\n            case 'info':\n                console.info(message);\n                break;\n            case 'warn':\n                console.warn(message);\n                break;\n            case 'error':\n                console.error(message);\n                break;\n        }\n    }\n}\n\nexport class DOMOutput implements LogOutput {\n    private container: HTMLElement | null = null;\n    private maxLines: number = 100;\n\n    constructor(containerId: string, maxLines: number = 100) {\n        this.container = document.getElementById(containerId);\n        this.maxLines = maxLines;\n    }\n\n    write(level: LogLevel, message: string, timestamp: Date): void {\n        if (!this.container) return;\n\n        const timeStr = timestamp.toLocaleTimeString();\n        const logLine = document.createElement('div');\n        logLine.className = `log-line log-${level}`;\n        logLine.textContent = `[${timeStr}] ${message}`;\n\n        this.container.appendChild(logLine);\n\n        // Remove oldest lines if we exceed maxLines\n        while (this.container.children.length > this.maxLines) {\n            this.container.removeChild(this.container.firstChild!);\n        }\n\n        // Auto-scroll to bottom\n        this.container.scrollTop = this.container.scrollHeight;\n    }\n}\n\nexport class Logger {\n    private outputs: LogOutput[] = [];\n    private minLevel: LogLevel = 'all';\n    private static instance: Logger | null = null;\n\n    constructor() {\n        // Default to console output\n        this.outputs.push(new ConsoleOutput());\n    }\n\n    static getInstance(): Logger {\n        if (!Logger.instance) {\n            Logger.instance = new Logger();\n        }\n        return Logger.instance;\n    }\n\n    addOutput(output: LogOutput): void {\n        this.outputs.push(output);\n    }\n\n    setMinLevel(level: LogLevel): void {\n        this.minLevel = level;\n    }\n\n    private shouldLog(level: LogLevel): boolean {\n        if (this.minLevel === 'all') return true;\n        if (level === 'all') return true;\n        \n        const levels: LogLevel[] = ['debug', 'info', 'warn', 'error'];\n        const minIndex = levels.indexOf(this.minLevel);\n        const currentIndex = levels.indexOf(level);\n        return currentIndex >= minIndex;\n    }\n\n    private log(level: LogLevel, message: string, context?: string): void {\n        if (!this.shouldLog(level)) return;\n\n        const contextPrefix = context ? `${context} ` : '';\n        const finalMessage = `${contextPrefix}${message}`;\n        const timestamp = new Date();\n        this.outputs.forEach(output => {\n            try {\n                output.write(level, finalMessage, timestamp);\n            } catch (error) {\n                console.error('Logger output error:', error);\n            }\n        });\n    }\n\n    debug(message: string, context?: string): void {\n        this.log('debug', message, context);\n    }\n\n    info(message: string, context?: string): void {\n        this.log('info', message, context);\n    }\n\n    warn(message: string, context?: string): void {\n        this.log('warn', message, context);\n    }\n\n    error(message: string, context?: string): void {\n        this.log('error', message, context);\n    }\n}\n\n// Export singleton instance for easy use\nexport const logger = Logger.getInstance();", "\n// Nordic Semicondutor's UART/Serial IDs for Bluetooth LE\nexport const UART_SERVICE_UUID = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const UART_TX_CHARACTERISTIC_UUID = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const UART_RX_CHARACTERISTIC_UUID = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const TOWER_DEVICE_NAME = \"ReturnToDarkTower\";\nexport type CommandPacket = Uint8Array;\n\n// tower commands \nexport const TOWER_COMMANDS = {\n  towerState: 0, // not a sendable command\n  doorReset: 1,\n  unjamDrums: 2,\n  resetCounter: 3,\n  calibration: 4,\n  overwriteDrumStates: 5,\n  // go no further!\n};\n// tower commands enum\nexport const TC = {\n  STATE: \"TOWER_STATE\",\n  INVALID_STATE: \"INVALID_STATE\",\n  FAILURE: \"HARDWARE_FAILURE\",\n  JIGGLE: \"MECH_JIGGLE_TRIGGERED\",\n  UNEXPECTED: \"MECH_UNEXPECTED_TRIGGER\",\n  DURATION: \"MECH_DURATION\",\n  DIFFERENTIAL: \"DIFFERENTIAL_READINGS\",\n  CALIBRATION: \"CALIBRATION_FINISHED\",\n  BATTERY: \"BATTERY_READING\",\n}\n\nexport const DRUM_PACKETS = {\n  topMiddle: 1,\n  bottom: 2,\n}\n\nexport const LIGHT_PACKETS = {\n  doorway: {\n    top: { north: 3, east: 3, south: 4, west: 4 },\n    middle: { north: 5, east: 5, south: 6, west: 6 },\n    bottom: { north: 7, east: 7, south: 8, west: 8 },\n  },\n  base: {\n    north: { a: 12, b: 14 },\n    east: { a: 11, b: 13 },\n    south: { a: 11, b: 13 },\n    west: { a: 12, b: 14 },\n  },\n  ledge: { north: 10, west: 10, south: 9, east: 9 },\n  overrides: 19,\n}\n\nexport type Glyphs = \"cleanse\" | \"quest\" | \"battle\" | \"banner\" | \"reinforce\";\n\n// positions based on calibrated drum orientation\nexport const GLYPHS = {\n  cleanse: { name: \"Cleanse\", level: \"top\", side: \"north\" },\n  quest: { name: \"Quest\", level: \"top\", side: \"south\" },\n  battle: { name: \"Battle\", level: \"middle\", side: \"north\" },\n  banner: { name: \"Banner\", level: \"bottom\", side: \"north\" },\n  reinforce: { name: \"Reinforce\", level: \"bottom\", side: \"south\" },\n}\n\nexport const AUDIO_COMMAND_POS = 15;\nexport const SKULL_DROP_COUNT_POS = 17;\n\nexport type TowerLevels = \"top\" | \"middle\" | \"bottom\";\nexport type TowerSide = \"north\" | \"south\" | \"east\" | \"west\";\n\nexport type LightTypes = \"base\" | \"doorway\" | \"ledge\";\n\nexport type DoorwayLight = { position: TowerSide, level: TowerLevels, style: string };\n\nexport type LedgeLight = { position: TowerSide, style: string };\n\nexport type BaseLightLevel = \"top\" | \"bottom\";\nexport type BaseLightPosition = { side: TowerSide, level: BaseLightLevel };\nexport type BaseLight = { position: BaseLightPosition, style: string }\n\nexport type Lights = {\n  doorway?: Array<DoorwayLight>,\n  ledge?: Array<LedgeLight>,\n  base?: Array<BaseLight>\n};\n\nexport type RotateCommand = {\n  top: TowerSide,\n  middle: TowerSide,\n  bottom: TowerSide\n}\n\n// prettier-ignore\nexport const drumPositionCmds = {\n  top: { north: 0b00010000, west: 0b00000010, south: 0b00010100, east: 0b00010110 }, // bits 1-8\n  middle: { north: 0b00010000, west: 0b01000000, south: 0b10010000, east: 0b11010000 }, // bits 1-4\n  bottom: { north: 0b01000010, west: 0b01001010, south: 0b01010010, east: 0b01011010 },\n}\n\nexport const BASE_LEDGE_LIGHTS_TO_BIT_SHIFT = [\"east\", \"west\"];\nexport const DOORWAY_LIGHTS_TO_BIT_SHIFT = [\"north\", \"south\"];\n\nexport const LIGHT_EFFECTS = {\n  on: 0x3,\n  off: 0,\n  breathe: 5,\n  breatheFast: 7,\n  breathe50percent: 9,\n  flicker: 0xb,\n}\n\n\nexport const TOWER_LIGHT_SEQUENCES = {\n  twinkle: 0x01,\n  flareThenFade: 0x02,\n  flareThenFadeBase: 0x03,\n  flareThenFlicker: 0x04,\n  angryStrobe01: 0x05,\n  angryStrobe02: 0x06,\n  angryStrobe03: 0x07,\n  gloat01: 0x08,\n  gloat02: 0x09,\n  gloat03: 0x0a,\n  defeat: 0x0b,\n  victory: 0x0c,\n  dungeonIdle: 0x0d,\n  sealReveal: 0x0e,\n  rotationAllDrums: 0x0f,\n  rotationDrumTop: 0x10,\n  rotationDrumMiddle: 0x11,\n  rotationDrumBottom: 0x12,\n  monthStarted: 0x13,\n}\n\nexport type SoundCategory =\n  \"Adversary\" | \"Ally\" | \"Battle\" |\n  \"Classic\" | \"Unlisted\" | \"Dungeon\" | \"Foe\" |\n  \"Spawn\" | \"Quest\" | \"Glyph\" | \"State\" | \"Seals\";\n\nexport type AudioLibrary = {\n  [name: string]: {\n    name: string,\n    value: number,\n    category: SoundCategory\n  }\n}\n\n// prettier-ignore\nexport const TOWER_AUDIO_LIBRARY: AudioLibrary = {\n  Ashstrider: { name: \"Ashstrider\", value: 0x01, category: \"Adversary\" },\n  BaneofOmens: { name: \"Bane of Omens\", value: 0x02, category: \"Adversary\" },\n  EmpressofShades: { name: \"Empress of Shades\", value: 0x03, category: \"Adversary\" },\n  GazeEternal: { name: \"Gaze Eternal\", value: 0x04, category: \"Adversary\" },\n  Gravemaw: { name: \"Gravemaw\", value: 0x05, category: \"Adversary\" },\n  IsatheHollow: { name: \"Isa the Hollow\", value: 0x06, category: \"Adversary\" },\n  LingeringRot: { name: \"Lingering Rot\", value: 0x07, category: \"Adversary\" },\n  UtukKu: { name: \"Utuk'Ku\", value: 0x08, category: \"Adversary\" },\n  Gleb: { name: \"Gleb\", value: 0x09, category: \"Ally\" },\n  Grigor: { name: \"Grigor\", value: 0x0A, category: \"Ally\" },\n  Hakan: { name: \"Hakan\", value: 0x0B, category: \"Ally\" },\n  Letha: { name: \"Letha\", value: 0x0C, category: \"Ally\" },\n  Miras: { name: \"Miras\", value: 0x0D, category: \"Ally\" },\n  Nimet: { name: \"Nimet\", value: 0x0E, category: \"Ally\" },\n  Tomas: { name: \"Tomas\", value: 0x0F, category: \"Ally\" },\n  Vasa: { name: \"Vasa\", value: 0x10, category: \"Ally\" },\n  Yana: { name: \"Yana\", value: 0x11, category: \"Ally\" },\n  Zaida: { name: \"Zaida\", value: 0x12, category: \"Ally\" },\n  ApplyAdvantage01: { name: \"Apply Advantage 01\", value: 0x13, category: \"Battle\" },\n  ApplyAdvantage02: { name: \"Apply Advantage 02\", value: 0x14, category: \"Battle\" },\n  ApplyAdvantage03: { name: \"Apply Advantage 03\", value: 0x15, category: \"Battle\" },\n  ApplyAdvantage04: { name: \"Apply Advantage 04\", value: 0x16, category: \"Battle\" },\n  ApplyAdvantage05: { name: \"Apply Advantage 05\", value: 0x17, category: \"Battle\" },\n  MaxAdvantages: { name: \"Max Advantages\", value: 0x18, category: \"Battle\" },\n  NoAdvantages: { name: \"No Advantages\", value: 0x19, category: \"Battle\" },\n  AdversaryEscaped: { name: \"Adversary Escaped\", value: 0x1A, category: \"Battle\" },\n  BattleButton: { name: \"Battle Button\", value: 0x1B, category: \"Battle\" },\n  CardFlip01: { name: \"Card Flip 01\", value: 0x1C, category: \"Battle\" },\n  CardFlip02: { name: \"Card Flip 02\", value: 0x1D, category: \"Battle\" },\n  CardFlip03: { name: \"Card Flip 03\", value: 0x1E, category: \"Battle\" },\n  CardFlipPaper01: { name: \"Card Flip Paper 01\", value: 0x1F, category: \"Battle\" },\n  CardFlipPaper02: { name: \"Card Flip Paper 02\", value: 0x20, category: \"Battle\" },\n  CardFlipPaper03: { name: \"Card Flip Paper 03\", value: 0x21, category: \"Battle\" },\n  CardSelect01: { name: \"Card Select 01\", value: 0x22, category: \"Battle\" },\n  CardSelect02: { name: \"Card Select 02\", value: 0x23, category: \"Battle\" },\n  CardSelect03: { name: \"Card Select 03\", value: 0x24, category: \"Battle\" },\n  BattleStart: { name: \"Battle Start\", value: 0x25, category: \"Battle\" },\n  BattleVictory: { name: \"Battle Victory\", value: 0x26, category: \"Battle\" },\n  ButtonHoldPressCombo: { name: \"Button Hold Press Combo\", value: 0x27, category: \"Battle\" },\n  ButtonHold: { name: \"Button Hold\", value: 0x28, category: \"Battle\" },\n  ButtonPress: { name: \"Button Press\", value: 0x29, category: \"Battle\" },\n  ClassicAdvantageApplied: { name: \"8-bit Advantage\", value: 0x2A, category: \"Classic\" },\n  ClassicAttackTower: { name: \"8-bit Attack Tower\", value: 0x2B, category: \"Classic\" },\n  ClassicBazaar: { name: \"8-bit Bazaar\", value: 0x2C, category: \"Classic\" },\n  ClassicConfirmation: { name: \"8-bit Confirmation\", value: 0x2D, category: \"Classic\" },\n  ClassicDragons: { name: \"8-bit Dragons\", value: 0x2E, category: \"Classic\" },\n  ClassicQuestFailed: { name: \"8-bit Quest Failed\", value: 0x2F, category: \"Classic\" },\n  ClassicRetreat: { name: \"8-bit Retreat\", value: 0x30, category: \"Classic\" },\n  ClassicStartMonth: { name: \"8-bit Start Month\", value: 0x31, category: \"Classic\" },\n  ClassicStartDungeon: { name: \"8-bit Start Dungeon\", value: 0x32, category: \"Classic\" },\n  ClassicTowerLost: { name: \"8-bit Tower Lost\", value: 0x33, category: \"Classic\" },\n  ClassicUnsure: { name: \"8-bit Unsure\", value: 0x34, category: \"Classic\" },\n  DungeonAdvantage01: { name: \"Dungeon Advantage 01\", value: 0x35, category: \"Dungeon\" },\n  DungeonAdvantage02: { name: \"Dungeon Advantage 02\", value: 0x36, category: \"Dungeon\" },\n  DungeonButton: { name: \"Dungeon Button\", value: 0x37, category: \"Dungeon\" },\n  DungeonFootsteps: { name: \"Dungeon Footsteps\", value: 0x38, category: \"Dungeon\" },\n  DungeonCaves: { name: \"Dungeon Caves\", value: 0x39, category: \"Dungeon\" },\n  DungeonComplete: { name: \"Dungeon Complete\", value: 0x3A, category: \"Dungeon\" },\n  DungeonEncampment: { name: \"Dungeon Encampment\", value: 0x3B, category: \"Dungeon\" },\n  DungeonEscape: { name: \"Dungeon Escape\", value: 0x3C, category: \"Dungeon\" },\n  DungeonFortress: { name: \"Dungeon Fortress\", value: 0x3D, category: \"Dungeon\" },\n  DungeonRuins: { name: \"Dungeon Ruins\", value: 0x3E, category: \"Dungeon\" },\n  DungeonShrine: { name: \"Dungeon Shrine\", value: 0x3F, category: \"Dungeon\" },\n  DungeonTomb: { name: \"Dungeon Tomb\", value: 0x40, category: \"Dungeon\" },\n  FoeEvent: { name: \"Foe Event\", value: 0x41, category: \"Foe\" },\n  FoeSpawn: { name: \"Foe Spawn\", value: 0x42, category: \"Foe\" },\n  Brigands: { name: \"Brigands\", value: 0x43, category: \"Foe\" },\n  ClanofNeuri: { name: \"Clan of Neuri\", value: 0x44, category: \"Foe\" },\n  Dragons: { name: \"Dragons\", value: 0x45, category: \"Foe\" },\n  Lemures: { name: \"Lemures\", value: 0x46, category: \"Foe\" },\n  LeveledUp: { name: \"Leveled Up\", value: 0x47, category: \"Foe\" },\n  Mormos: { name: \"Mormos\", value: 0x48, category: \"Foe\" },\n  Oreks: { name: \"Oreks\", value: 0x49, category: \"Foe\" },\n  ShadowWolves: { name: \"Shadow Wolves\", value: 0x4A, category: \"Foe\" },\n  SpineFiends: { name: \"Spine Fiends\", value: 0x4B, category: \"Foe\" },\n  Strigas: { name: \"Strigas\", value: 0x4C, category: \"Foe\" },\n  Titans: { name: \"Titans\", value: 0x4D, category: \"Foe\" },\n  FrostTrolls: { name: \"Frost Trolls\", value: 0x4E, category: \"Foe\" },\n  WidowmadeSpiders: { name: \"Widowmade Spiders\", value: 0x4F, category: \"Foe\" },\n  AshstriderSpawn: { name: \"Ashstrider Spawn\", value: 0x50, category: \"Spawn\" },\n  BaneofOmensSpawn: { name: \"Bane of Omens Spawn\", value: 0x51, category: \"Spawn\" },\n  EmpressofShadesSpawn: { name: \"Empress of Shades Spawn\", value: 0x52, category: \"Spawn\" },\n  GazeEternalSpawn: { name: \"Gaze Eternal Spawn\", value: 0x53, category: \"Spawn\" },\n  GravemawSpawn: { name: \"Gravemaw Spawn\", value: 0x54, category: \"Spawn\" },\n  IsatheHollowSpawn: { name: \"Isa the Hollow Spawn\", value: 0x55, category: \"Spawn\" },\n  LingeringRotSpawn: { name: \"Lingering Rot Spawn\", value: 0x56, category: \"Spawn\" },\n  UtukKuSpawn: { name: \"Utuk'Ku Spawn\", value: 0x57, category: \"Spawn\" },\n  QuestComplete: { name: \"Quest Complete\", value: 0x58, category: \"Quest\" },\n  TowerAllGlyphs: { name: \"Tower All Glyphs\", value: 0x59, category: \"Glyph\" },\n  TowerAngry1: { name: \"Tower Angry 1\", value: 0x5A, category: \"Glyph\" },\n  TowerAngry2: { name: \"Tower Angry 2\", value: 0x5B, category: \"Glyph\" },\n  TowerAngry3: { name: \"Tower Angry 3\", value: 0x5C, category: \"Glyph\" },\n  TowerAngry4: { name: \"Tower Angry 4\", value: 0x5D, category: \"Glyph\" },\n  TowerConnected: { name: \"Tower Connected\", value: 0x5E, category: \"State\" },\n  GameStart: { name: \"Game Start\", value: 0x5F, category: \"State\" },\n  TowerGloat1: { name: \"Tower Gloat 1\", value: 0x60, category: \"State\" },\n  TowerGloat2: { name: \"Tower Gloat 2\", value: 0x61, category: \"State\" },\n  TowerGloat3: { name: \"Tower Gloat 3\", value: 0x62, category: \"State\" },\n  TowerGlyph: { name: \"Tower Glyph\", value: 0x63, category: \"State\" },\n  TowerIdle1: { name: \"Tower Idle 1\", value: 0x64, category: \"State\" },\n  TowerIdle2: { name: \"Tower Idle 2\", value: 0x65, category: \"State\" },\n  TowerIdle3: { name: \"Tower Idle 3\", value: 0x66, category: \"State\" },\n  TowerIdle4: { name: \"Tower Idle 4\", value: 0x67, category: \"State\" },\n  TowerIdle5: { name: \"Tower Idle 5\", value: 0x68, category: \"Unlisted\" },\n  TowerDisconnected: { name: \"Tower Disconnect\", value: 0x69, category: \"State\" },\n  MonthEnded: { name: \"Month Ended\", value: 0x6A, category: \"State\" },\n  MonthStarted: { name: \"Month Started\", value: 0x6B, category: \"State\" },\n  QuestFailed: { name: \"Quest Failed\", value: 0x6C, category: \"Quest\" },\n  RotateExit: { name: \"Rotate Exit\", value: 0x6D, category: \"Seals\" },\n  RotateLoop: { name: \"Rotate Loop\", value: 0x6E, category: \"Seals\" },\n  RotateStart: { name: \"Rotate Start\", value: 0x6F, category: \"Seals\" },\n  TowerSeal: { name: \"Tower Seal\", value: 0x70, category: \"Seals\" },\n  TowerSkullDropped: { name: \"Tower Skull Dropped\", value: 0x71, category: \"State\" },\n}\n\n// Tower Responses\n// prettier-ignore\nexport const TOWER_MESSAGES = {\n  TOWER_STATE: { name: \"Tower State\", value: 0, critical: false },\n  INVALID_STATE: { name: \"Invalid State\", value: 1, critical: true },\n  HARDWARE_FAILURE: { name: \"Hardware Failure\", value: 2, critical: true },\n  MECH_JIGGLE_TRIGGERED: { name: \"Unjam Jiggle Triggered\", value: 3, critical: false },\n  MECH_DURATION: { name: \"Rotation Duration\", value: 4, critical: false },\n  MECH_UNEXPECTED_TRIGGER: { name: \"Unexpected Trigger\", value: 5, critical: false },\n  DIFFERENTIAL_READINGS: { name: \"Diff Voltage Readings\", value: 6, critical: false },\n  BATTERY_READING: { name: \"Battery Level\", value: 7, critical: false },\n  CALIBRATION_FINISHED: { name: \"Calibration Finished\", value: 8, critical: false },\n}\n\n// 5% increments - voltages are in millivolts and typical for a 250mA discharge \n// at room temperature which roughly matches a single Energizer EN91\n// This is a rough approximation as chemical makeup of battieries have differing\n// battery performace (Alkaline vs NiMH vs Li etc).\nexport const VOLTAGE_LEVELS = [\n  1500, 1390, 1350, 1320, 1295, 1270, 1245, 1225, 1205,\n  1180, 1175, 1166, 1150, 1133, 1125, 1107, 1095, 1066, 1033,\n  980 // There's an additional 5% until 800mV is reached\n];", "import {\n    TC,\n    TOWER_MESSAGES,\n    VOLTAGE_LEVELS\n} from './constants';\n\nexport class TowerResponseProcessor {\n    private logDetail: boolean = false;\n\n    constructor(logDetail: boolean = false) {\n        this.logDetail = logDetail;\n    }\n\n    /**\n     * Sets whether to include detailed information in command string conversion\n     * @param {boolean} enabled - Whether to enable detailed logging\n     */\n    setDetailedLogging(enabled: boolean) {\n        this.logDetail = enabled;\n    }\n\n    /**\n     * Maps a command value to its corresponding tower message definition.\n     * @param {number} cmdValue - Command value received from tower\n     * @returns {Object} Object containing command key and command definition\n     */\n    getTowerCommand(cmdValue: number) {\n        const cmdKeys = Object.keys(TOWER_MESSAGES);\n        const cmdKey = cmdKeys.find(key => TOWER_MESSAGES[key].value === cmdValue);\n        const command = TOWER_MESSAGES[cmdKey];\n        return { cmdKey, command };\n    }\n\n    /**\n     * Converts a command packet to a human-readable string array for logging.\n     * @param {Uint8Array} command - Command packet to convert\n     * @returns {Array<string>} Human-readable representation of the command\n     */\n    commandToString(command: Uint8Array): Array<string> {\n        const cmdValue = command[0];\n        const { cmdKey, command: towerCommand } = this.getTowerCommand(cmdValue);\n        \n        switch (cmdKey) {\n            case TC.STATE:\n            case TC.INVALID_STATE:\n            case TC.FAILURE:\n            case TC.JIGGLE:\n            case TC.UNEXPECTED:\n            case TC.DURATION:\n            case TC.DIFFERENTIAL:\n            case TC.CALIBRATION:\n                return [towerCommand.name, this.commandToPacketString(command)];\n            case TC.BATTERY:\n                const millivolts = this.getMilliVoltsFromTowerReponse(command);\n                const retval = [towerCommand.name, this.millVoltsToPercentage(millivolts)];\n                if (this.logDetail) {\n                    retval.push(`${millivolts}mv`);\n                    retval.push(this.commandToPacketString(command));\n                }\n                return retval;\n            default:\n                return [\"Unmapped Response!\", this.commandToPacketString(command)];\n        }\n    }\n\n    /**\n     * Converts a command packet to a hex string representation for debugging.\n     * @param {Uint8Array} command - Command packet to convert\n     * @returns {string} Hex string representation of the command packet\n     */\n    commandToPacketString(command: Uint8Array): string {\n        let cmdStr = \"[\";\n        command.forEach(n => cmdStr += n.toString(16) + \",\");\n        cmdStr = cmdStr.slice(0, -1) + \"]\";\n        return cmdStr;\n    }\n\n    /**\n     * Extracts battery voltage in millivolts from a tower battery response.\n     * @param {Uint8Array} command - Battery response packet from tower\n     * @returns {number} Battery voltage in millivolts\n     */\n    getMilliVoltsFromTowerReponse(command: Uint8Array): number {\n        const mv = new Uint8Array(4);\n        mv[0] = command[4];\n        mv[1] = command[3];\n        mv[2] = 0;\n        mv[3] = 0;\n        const view = new DataView(mv.buffer, 0);\n        return view.getUint32(0, true);\n    }\n\n    /**\n     * Converts battery voltage in millivolts to percentage.\n     * Tower returns sum total battery level in millivolts for all batteries.\n     * @param {number} mv - Battery voltage in millivolts\n     * @returns {string} Battery percentage as formatted string (e.g., \"75%\")\n     */\n    millVoltsToPercentage(mv: number): string {\n        const batLevel = mv ? mv / 3 : 0; // lookup is based on single AA\n        const levels = VOLTAGE_LEVELS.filter(v => batLevel >= v);\n        return `${levels.length * 5}%`;\n    }\n\n    /**\n     * Determines if a response should be logged based on command type and configuration.\n     * @param {string} cmdKey - Command key from tower message\n     * @param {any} logConfig - Logging configuration object\n     * @returns {boolean} Whether this response should be logged\n     */\n    shouldLogResponse(cmdKey: string, logConfig: any): boolean {\n        const logAll = logConfig[\"LOG_ALL\"];\n        let canLogThisResponse = logConfig[cmdKey] || logAll;\n\n        // Log unknown commands by default for debugging\n        if (!cmdKey) {\n            canLogThisResponse = true;\n        }\n\n        return canLogThisResponse;\n    }\n\n    /**\n     * Checks if a command is a battery response type.\n     * @param {string} cmdKey - Command key from tower message\n     * @returns {boolean} True if this is a battery response\n     */\n    isBatteryResponse(cmdKey: string): boolean {\n        return cmdKey === TC.BATTERY;\n    }\n\n    /**\n     * Checks if a command is a tower state response type.\n     * @param {string} cmdKey - Command key from tower message\n     * @returns {boolean} True if this is a tower state response\n     */\n    isTowerStateResponse(cmdKey: string): boolean {\n        return cmdKey === TC.STATE;\n    }\n}", "import {\n    TOWER_DEVICE_NAME,\n    UART_SERVICE_UUID,\n    UART_TX_CHARACTERISTIC_UUID,\n    UART_RX_CHARACTERISTIC_UUID,\n    SKULL_DROP_COUNT_POS,\n} from './constants';\nimport { Logger } from './Logger';\nimport { TowerResponseProcessor } from './udtTowerResponse';\n\nexport interface ConnectionCallbacks {\n    onTowerConnect: () => void;\n    onTowerDisconnect: () => void;\n    onBatteryLevelNotify: (millivolts: number) => void;\n    onCalibrationComplete: () => void;\n    onSkullDrop: (towerSkullCount: number) => void;\n}\n\nexport interface ConnectionStatus {\n    isConnected: boolean;\n    isGattConnected: boolean;\n    isCalibrated: boolean;\n    lastBatteryHeartbeatMs: number;\n    lastCommandResponseMs: number;\n    batteryHeartbeatHealthy: boolean;\n    connectionMonitoringEnabled: boolean;\n    batteryHeartbeatMonitoringEnabled: boolean;\n    batteryHeartbeatTimeoutMs: number;\n    batteryHeartbeatVerifyConnection: boolean;\n    connectionTimeoutMs: number;\n}\n\nexport class UdtBleConnection {\n    private logger: Logger;\n    private callbacks: ConnectionCallbacks;\n    private responseProcessor: TowerResponseProcessor;\n\n    // BLE connection objects\n    TowerDevice = null;\n    txCharacteristic = null;\n    rxCharacteristic = null;\n\n    // Connection state\n    isConnected: boolean = false;\n    isCalibrated: boolean = false;\n    performingCalibration: boolean = false;\n    performingLongCommand: boolean = false;\n\n    // Connection monitoring\n    private connectionMonitorInterval: NodeJS.Timeout | null = null;\n    connectionMonitorFrequency: number = 2 * 1000;\n    lastSuccessfulCommand: number = 0;\n    connectionTimeoutThreshold: number = 30 * 1000;\n    enableConnectionMonitoring: boolean = true;\n\n    // Battery heartbeat monitoring\n    lastBatteryHeartbeat: number = 0;\n    batteryHeartbeatTimeout: number = 3 * 1000;\n    longTowerCommandTimeout: number = 30 * 1000;\n    enableBatteryHeartbeatMonitoring: boolean = true;\n    batteryHeartbeatVerifyConnection: boolean = true; // When true, verifies connection before triggering disconnection on heartbeat timeout\n\n    // Tower state\n    towerSkullDropCount: number = -1;\n    lastBatteryNotification: number = 0;\n    lastBatteryPercentage: string;\n    batteryNotifyFrequency: number = 15 * 1000;\n    batteryNotifyOnValueChangeOnly = false;\n\n    // Logging configuration\n    logTowerResponses = true;\n    logTowerResponseConfig = {\n        TOWER_STATE: true,\n        INVALID_STATE: true,\n        HARDWARE_FAILURE: true,\n        MECH_JIGGLE_TRIGGERED: true,\n        MECH_UNEXPECTED_TRIGGER: true,\n        MECH_DURATION: true,\n        DIFFERENTIAL_READINGS: false,\n        BATTERY_READING: true,\n        CALIBRATION_FINISHED: true,\n        LOG_ALL: false,\n    };\n\n    constructor(logger: Logger, callbacks: ConnectionCallbacks) {\n        this.logger = logger;\n        this.callbacks = callbacks;\n        this.responseProcessor = new TowerResponseProcessor();\n    }\n\n    async connect() {\n        this.logger.info(\"Looking for Tower...\", '[UDT]');\n        try {\n            // @ts-ignore\n            this.TowerDevice = await navigator.bluetooth.requestDevice({\n                filters: [{ namePrefix: TOWER_DEVICE_NAME }],\n                optionalServices: [UART_SERVICE_UUID]\n            });\n\n            if (this.TowerDevice === null) {\n                this.logger.warn(\"Tower not found\", '[UDT]');\n                return\n            }\n\n            // @ts-ignore\n            navigator.bluetooth.addEventListener(\"availabilitychanged\", this.bleAvailabilityChange);\n\n            this.logger.info(\"Connecting to Tower GATT Server...\", '[UDT]');\n            const server = await this.TowerDevice.gatt.connect();\n\n            this.logger.info(\"Getting Tower Primary Service...\", '[UDT]');\n            const service = await server.getPrimaryService(UART_SERVICE_UUID);\n\n            this.logger.info(\"Getting Tower Characteristics...\", '[UDT]');\n            this.txCharacteristic = await service.getCharacteristic(\n                UART_TX_CHARACTERISTIC_UUID\n            );\n\n            this.rxCharacteristic = await service.getCharacteristic(\n                UART_RX_CHARACTERISTIC_UUID\n            );\n\n            this.logger.info(\"Subscribing to Tower...\", '[UDT]');\n            await this.rxCharacteristic.startNotifications();\n            await this.rxCharacteristic.addEventListener(\n                \"characteristicvaluechanged\",\n                this.onRxCharacteristicValueChanged\n            );\n\n            this.TowerDevice.addEventListener('gattserverdisconnected', this.onTowerDeviceDisconnected);\n\n            this.logger.info('Tower connection complete', '[UDT]');\n            this.isConnected = true;\n            this.lastSuccessfulCommand = Date.now();\n            this.lastBatteryHeartbeat = Date.now();\n\n            if (this.enableConnectionMonitoring) {\n                this.startConnectionMonitoring();\n            }\n\n            this.callbacks.onTowerConnect();\n        } catch (error) {\n            this.logger.error(`Tower Connection Error: ${error}`, '[UDT]');\n            this.isConnected = false;\n            this.callbacks.onTowerDisconnect();\n        }\n    }\n\n    async disconnect() {\n        if (!this.TowerDevice) {\n            return;\n        }\n\n        this.stopConnectionMonitoring();\n\n        if (this.TowerDevice.gatt.connected) {\n            this.TowerDevice.removeEventListener('gattserverdisconnected', this.onTowerDeviceDisconnected);\n            await this.TowerDevice.gatt.disconnect();\n            this.logger.info(\"Tower disconnected\", '[UDT]');\n            this.handleDisconnection();\n        }\n    }\n\n    onRxCharacteristicValueChanged = (event: Event) => {\n        this.lastSuccessfulCommand = Date.now();\n\n        // @ts-ignore-next-line\n        const target = event.target as any;\n        let receivedData = new Uint8Array(target.value.byteLength);\n        for (var i = 0; i < target.value.byteLength; i++) {\n            receivedData[i] = target.value.getUint8(i);\n        }\n        const { cmdKey } = this.responseProcessor.getTowerCommand(receivedData[0]);\n\n        if (this.logTowerResponses) {\n            this.logTowerResponse(receivedData);\n        }\n\n        if (this.responseProcessor.isTowerStateResponse(cmdKey)) {\n            this.handleTowerStateResponse(receivedData);\n        }\n\n        if (this.responseProcessor.isBatteryResponse(cmdKey)) {\n            this.lastBatteryHeartbeat = Date.now();\n\n            const millivolts = this.responseProcessor.getMilliVoltsFromTowerReponse(receivedData);\n            const batteryPercentage = this.responseProcessor.millVoltsToPercentage(millivolts);\n            const didBatteryLevelChange = this.lastBatteryPercentage !== batteryPercentage;\n            const batteryNotifyFrequencyPassed = ((Date.now() - this.lastBatteryNotification) >= this.batteryNotifyFrequency);\n\n            const shouldNotify = this.batteryNotifyOnValueChangeOnly ?\n                didBatteryLevelChange :\n                batteryNotifyFrequencyPassed;\n\n            if (shouldNotify) {\n                this.logger.info(`Tower response: ${this.responseProcessor.commandToString(receivedData).join(' ')}`, '[UDT]');\n                this.lastBatteryNotification = Date.now();\n                this.lastBatteryPercentage = batteryPercentage;\n                this.callbacks.onBatteryLevelNotify(millivolts);\n            }\n        }\n    }\n\n    private handleTowerStateResponse(receivedData: Uint8Array) {\n        const dataSkullDropCount = receivedData[SKULL_DROP_COUNT_POS];\n\n        if (this.performingCalibration) {\n            this.performingCalibration = false;\n            this.performingLongCommand = false;\n            this.isCalibrated = true;\n            this.lastBatteryHeartbeat = Date.now();\n            this.callbacks.onCalibrationComplete();\n            this.logger.info('Tower calibration complete', '[UDT]');\n        }\n\n        if (dataSkullDropCount !== this.towerSkullDropCount) {\n            if (!!dataSkullDropCount) {\n                this.callbacks.onSkullDrop(dataSkullDropCount);\n                this.logger.info(`Skull drop detected: app:${this.towerSkullDropCount < 0 ? 'empty' : this.towerSkullDropCount}  tower:${dataSkullDropCount}`, '[UDT]');\n            } else {\n                this.logger.info(`Skull count reset to ${dataSkullDropCount}`, '[UDT]');\n            }\n            this.towerSkullDropCount = dataSkullDropCount;\n        }\n    }\n\n    private logTowerResponse(receivedData: Uint8Array) {\n        const { cmdKey } = this.responseProcessor.getTowerCommand(receivedData[0]);\n        \n        if (!this.responseProcessor.shouldLogResponse(cmdKey, this.logTowerResponseConfig)) {\n            return;\n        }\n\n        if (this.responseProcessor.isBatteryResponse(cmdKey)) {\n            return; // logged elsewhere\n        }\n\n        this.logger.info(`Tower response: ${this.responseProcessor.commandToString(receivedData).join(' ')}`, '[UDT]');\n    }\n\n    bleAvailabilityChange = (event: Event & { value: boolean }) => {\n        this.logger.info('Bluetooth availability changed', '[UDT]');\n        const availability = event.value;\n\n        if (!availability && this.isConnected) {\n            this.logger.warn('Bluetooth became unavailable - handling disconnection', '[UDT]');\n            this.handleDisconnection();\n        }\n    }\n\n    onTowerDeviceDisconnected = (_event: Event) => {\n        this.logger.warn('Tower device disconnected unexpectedly', '[UDT]');\n        this.handleDisconnection();\n    }\n\n    private handleDisconnection() {\n        this.isConnected = false;\n        this.isCalibrated = false;\n        this.performingCalibration = false;\n        this.performingLongCommand = false;\n        this.stopConnectionMonitoring();\n\n        this.lastBatteryHeartbeat = 0;\n        this.lastSuccessfulCommand = 0;\n\n        this.txCharacteristic = null;\n        this.rxCharacteristic = null;\n\n        this.callbacks.onTowerDisconnect();\n    }\n\n    private startConnectionMonitoring() {\n        if (this.connectionMonitorInterval) {\n            clearInterval(this.connectionMonitorInterval);\n        }\n\n        this.connectionMonitorInterval = setInterval(() => {\n            this.checkConnectionHealth();\n        }, this.connectionMonitorFrequency);\n    }\n\n    private stopConnectionMonitoring() {\n        if (this.connectionMonitorInterval) {\n            clearInterval(this.connectionMonitorInterval);\n            this.connectionMonitorInterval = null;\n        }\n    }\n\n    private checkConnectionHealth() {\n        if (!this.isConnected || !this.TowerDevice) {\n            return;\n        }\n\n        if (!this.TowerDevice.gatt.connected) {\n            this.logger.warn('GATT connection lost detected during health check', '[UDT]');\n            this.handleDisconnection();\n            return;\n        }\n\n        if (this.enableBatteryHeartbeatMonitoring) {\n            const timeSinceLastBatteryHeartbeat = Date.now() - this.lastBatteryHeartbeat;\n            const timeoutThreshold = this.performingLongCommand ? this.longTowerCommandTimeout : this.batteryHeartbeatTimeout;\n\n            if (timeSinceLastBatteryHeartbeat > timeoutThreshold) {\n                const operationContext = this.performingLongCommand ? ' during long command operation' : '';\n                this.logger.warn(`Battery heartbeat timeout detected${operationContext} - no battery status received in ${timeSinceLastBatteryHeartbeat}ms (expected every ~200ms)`, '[UDT]');\n\n                if (this.performingLongCommand) {\n                    this.logger.info('Ignoring battery heartbeat timeout during long command - this is expected behavior', '[UDT]');\n                    return;\n                }\n\n                // Before assuming disconnection, verify if the tower is actually still responsive\n                if (this.batteryHeartbeatVerifyConnection) {\n                    this.logger.info('Verifying tower connection status before triggering disconnection...', '[UDT]');\n                    \n                    // Check if GATT is still connected and characteristics are available\n                    if (this.TowerDevice?.gatt?.connected && this.rxCharacteristic) {\n                        this.logger.info('GATT connection and characteristics still available - heartbeat timeout may be temporary', '[UDT]');\n                        \n                        // Reset the last battery heartbeat to current time to give it another chance\n                        // This prevents repeated false disconnections while the tower is still actually connected\n                        this.lastBatteryHeartbeat = Date.now();\n                        this.logger.info('Reset battery heartbeat timer - will monitor for another timeout period', '[UDT]');\n                        return;\n                    }\n                }\n\n                this.logger.warn('Tower possibly disconnected due to battery depletion or power loss', '[UDT]');\n                this.handleDisconnection();\n                return;\n            }\n        }\n\n        const timeSinceLastResponse = Date.now() - this.lastSuccessfulCommand;\n        if (timeSinceLastResponse > this.connectionTimeoutThreshold) {\n            this.logger.warn('General connection timeout detected - no responses received', '[UDT]');\n            this.logger.warn('Heartbeat timeout - connection appears lost', '[UDT]');\n            this.handleDisconnection();\n        }\n    }\n\n    setConnectionMonitoring(enabled: boolean) {\n        this.enableConnectionMonitoring = enabled;\n        if (enabled && this.isConnected) {\n            this.startConnectionMonitoring();\n        } else {\n            this.stopConnectionMonitoring();\n        }\n    }\n\n    configureConnectionMonitoring(frequency: number = 2000, timeout: number = 30000) {\n        this.connectionMonitorFrequency = frequency;\n        this.connectionTimeoutThreshold = timeout;\n\n        if (this.enableConnectionMonitoring && this.isConnected) {\n            this.startConnectionMonitoring();\n        }\n    }\n\n    configureBatteryHeartbeatMonitoring(enabled: boolean = true, timeout: number = 3000, verifyConnection: boolean = true) {\n        this.enableBatteryHeartbeatMonitoring = enabled;\n        this.batteryHeartbeatTimeout = timeout;\n        this.batteryHeartbeatVerifyConnection = verifyConnection;\n    }\n\n    async isConnectedAndResponsive(): Promise<boolean> {\n        if (!this.isConnected || !this.TowerDevice?.gatt?.connected) {\n            return false;\n        }\n        \n        // Check if characteristics are still available\n        if (!this.txCharacteristic || !this.rxCharacteristic) {\n            return false;\n        }\n        \n        // Additional check: verify the GATT service is still accessible\n        try {\n            // This will throw if the service is no longer available\n            if (this.txCharacteristic.service && this.rxCharacteristic.service) {\n                return true;\n            }\n        } catch (error) {\n            this.logger.warn('GATT characteristics or services no longer accessible', '[UDT]');\n            return false;\n        }\n        \n        return true;\n    }\n\n    getConnectionStatus(): ConnectionStatus {\n        const now = Date.now();\n        const timeSinceLastBattery = this.lastBatteryHeartbeat ? now - this.lastBatteryHeartbeat : -1;\n        const timeSinceLastCommand = this.lastSuccessfulCommand ? now - this.lastSuccessfulCommand : -1;\n\n        return {\n            isConnected: this.isConnected,\n            isGattConnected: this.TowerDevice?.gatt?.connected || false,\n            isCalibrated: this.isCalibrated,\n            lastBatteryHeartbeatMs: timeSinceLastBattery,\n            lastCommandResponseMs: timeSinceLastCommand,\n            batteryHeartbeatHealthy: timeSinceLastBattery >= 0 && timeSinceLastBattery < this.batteryHeartbeatTimeout,\n            connectionMonitoringEnabled: this.enableConnectionMonitoring,\n            batteryHeartbeatMonitoringEnabled: this.enableBatteryHeartbeatMonitoring,\n            batteryHeartbeatTimeoutMs: this.batteryHeartbeatTimeout,\n            batteryHeartbeatVerifyConnection: this.batteryHeartbeatVerifyConnection,\n            connectionTimeoutMs: this.connectionTimeoutThreshold\n        };\n    }\n\n    async cleanup() {\n        this.logger.info('Cleaning up UdtBleConnection instance', '[UDT]');\n\n        this.stopConnectionMonitoring();\n\n        if (this.TowerDevice) {\n            this.TowerDevice.removeEventListener('gattserverdisconnected', this.onTowerDeviceDisconnected);\n        }\n\n        // @ts-ignore\n        if (navigator.bluetooth) {\n            // @ts-ignore\n            navigator.bluetooth.removeEventListener(\"availabilitychanged\", this.bleAvailabilityChange);\n        }\n\n        if (this.isConnected) {\n            await this.disconnect();\n        }\n    }\n\n}", "import {\n    AUDIO_COMMAND_POS,\n    DRUM_PACKETS,\n    LIGHT_PACKETS,\n    DOORWAY_LIGHTS_TO_BIT_SHIFT,\n    BASE_LEDGE_LIGHTS_TO_BIT_SHIFT,\n    LIGHT_EFFECTS,\n    drumPositionCmds,\n    type Lights,\n    type TowerSide,\n    type CommandPacket\n} from './constants';\n\nexport interface DrumPositions {\n    topMiddle: number;\n    bottom: number;\n}\n\nexport class UdtCommandFactory {\n    /**\n     * Creates a light command packet from a lights configuration object.\n     * @param lights - Light configuration specifying doorway, ledge, and base lights\n     * @returns Command packet for controlling tower lights\n     */\n    createLightPacketCommand(lights: Lights): Uint8Array {\n        let packetPos: number | null = null;\n        const command = new Uint8Array(20);\n        const doorways = lights?.doorway;\n        const ledges = lights?.ledge;\n        const bases = lights?.base;\n\n        doorways && doorways.forEach(dlt => {\n            packetPos = LIGHT_PACKETS.doorway[dlt.level][dlt.position];\n            const shouldBitShift = DOORWAY_LIGHTS_TO_BIT_SHIFT.includes(dlt.position);\n            command[packetPos] += LIGHT_EFFECTS[`${dlt.style}`] * (shouldBitShift ? 0x10 : 0x1);\n        });\n\n        ledges && ledges.forEach(llt => {\n            packetPos = LIGHT_PACKETS.ledge[llt.position];\n            const shouldBitShift = BASE_LEDGE_LIGHTS_TO_BIT_SHIFT.includes(llt.position);\n            command[packetPos] += LIGHT_EFFECTS[`${llt.style}`] * (shouldBitShift ? 0x10 : 0x1);\n        });\n\n        bases && bases.forEach(blt => {\n            packetPos = LIGHT_PACKETS.base[blt.position.side][blt.position.level];\n            const shouldBitShift = BASE_LEDGE_LIGHTS_TO_BIT_SHIFT.includes(blt.position.side);\n            command[packetPos] += LIGHT_EFFECTS[`${blt.style}`] * (shouldBitShift ? 0x10 : 0x1);\n        });\n\n        return command;\n    }\n\n    /**\n     * Creates a light override command packet.\n     * @param lightOverride - Light override value to send\n     * @returns Command packet for light override\n     */\n    createLightOverrideCommand(lightOverride: number): Uint8Array {\n        const lightOverrideCommand = new Uint8Array(20);\n        lightOverrideCommand[LIGHT_PACKETS.overrides] = lightOverride;\n        return lightOverrideCommand;\n    }\n\n    /**\n     * Creates a rotation command packet for positioning tower drums.\n     * @param top - Target position for top drum\n     * @param middle - Target position for middle drum\n     * @param bottom - Target position for bottom drum\n     * @returns Command packet for rotating tower drums\n     */\n    createRotateCommand(top: TowerSide, middle: TowerSide, bottom: TowerSide): Uint8Array {\n        const rotateCmd = new Uint8Array(20);\n        rotateCmd[DRUM_PACKETS.topMiddle] =\n            drumPositionCmds.top[top] | drumPositionCmds.middle[middle];\n        rotateCmd[DRUM_PACKETS.bottom] = drumPositionCmds.bottom[bottom];\n        return rotateCmd;\n    }\n\n    /**\n     * Creates a sound command packet for playing tower audio.\n     * @param soundIndex - Index of the sound to play from the audio library\n     * @returns Command packet for playing sound\n     */\n    createSoundCommand(soundIndex: number): Uint8Array {\n        const soundCommand = new Uint8Array(20);\n        const sound = Number(\"0x\" + Number(soundIndex).toString(16).padStart(2, '0'));\n        soundCommand[AUDIO_COMMAND_POS] = sound;\n        return soundCommand;\n    }\n\n    /**\n     * Updates a command packet with the current drum positions.\n     * @param commandPacket - The command packet to update with current drum positions\n     * @param currentPositions - Current drum positions to apply\n     */\n    updateCommandWithCurrentDrumPositions(commandPacket: CommandPacket, currentPositions: DrumPositions): void {\n        commandPacket[DRUM_PACKETS.topMiddle] = currentPositions.topMiddle;\n        commandPacket[DRUM_PACKETS.bottom] = currentPositions.bottom;\n    }\n\n    /**\n     * Creates a combined command packet by merging rotation, light, and sound commands.\n     * @param rotateCommand - Rotation command packet\n     * @param lightCommand - Light command packet\n     * @param soundCommand - Optional sound command packet\n     * @returns Combined command packet\n     */\n    createMultiCommand(\n        rotateCommand: Uint8Array, \n        lightCommand: Uint8Array, \n        soundCommand?: Uint8Array\n    ): Uint8Array {\n        const multiCmd = new Uint8Array(20);\n        \n        // Combine rotate and light commands with bitwise OR\n        for (let index = 0; index < 20; index++) {\n            multiCmd[index] = rotateCommand[index] | lightCommand[index];\n        }\n\n        // Add sound if provided\n        if (soundCommand) {\n            multiCmd[AUDIO_COMMAND_POS] = multiCmd[AUDIO_COMMAND_POS] | soundCommand[AUDIO_COMMAND_POS];\n        }\n\n        return multiCmd;\n    }\n\n    /**\n     * Creates a basic tower command packet with the specified command value.\n     * @param commandValue - The command value to send\n     * @returns Basic command packet\n     */\n    createBasicCommand(commandValue: number): Uint8Array {\n        return new Uint8Array([commandValue]);\n    }\n}", "import {\n    TOWER_COMMANDS,\n    TOWER_AUDIO_LIBRARY,\n    AUDIO_COMMAND_POS,\n    DRUM_PACKETS,\n    drumPositionCmds,\n    type Lights,\n    type TowerSide,\n    type TowerLevels,\n    type LedgeLight,\n    type DoorwayLight,\n    type RotateCommand\n} from './constants';\nimport { Logger } from './Logger';\nimport { UdtCommandFactory } from './udtCommandFactory';\nimport { UdtBleConnection } from './udtBleConnection';\nimport { TowerResponseProcessor } from './udtTowerResponse';\n\nexport interface TowerCommandDependencies {\n    logger: Logger;\n    commandFactory: UdtCommandFactory;\n    bleConnection: UdtBleConnection;\n    responseProcessor: TowerResponseProcessor;\n    currentDrumPositions: { topMiddle: number; bottom: number };\n    logDetail: boolean;\n    retrySendCommandCount: { value: number };\n    retrySendCommandMax: number;\n}\n\nexport class UdtTowerCommands {\n    private deps: TowerCommandDependencies;\n\n    constructor(dependencies: TowerCommandDependencies) {\n        this.deps = dependencies;\n    }\n\n    /**\n     * Sends a command packet to the tower via Bluetooth with error handling and retry logic.\n     * @param command - The command packet to send to the tower\n     * @returns Promise that resolves when command is sent successfully\n     */\n    async sendTowerCommand(command: Uint8Array): Promise<void> {\n        try {\n            const cmdStr = this.deps.responseProcessor.commandToPacketString(command);\n            this.deps.logDetail && this.deps.logger.debug(`packet(s) sent: ${cmdStr}`, '[UDT]');\n            if (!this.deps.bleConnection.txCharacteristic || !this.deps.bleConnection.isConnected) {\n                this.deps.logger.warn('Tower is not connected', '[UDT]');\n                return;\n            }\n            await this.deps.bleConnection.txCharacteristic.writeValue(command);\n            this.deps.retrySendCommandCount.value = 0;\n            this.deps.bleConnection.lastSuccessfulCommand = Date.now();\n        } catch (error) {\n            this.deps.logger.error(`command send error: ${error}`, '[UDT]');\n            const errorMsg = error?.message ?? new String(error);\n            const wasCancelled = errorMsg.includes('User cancelled');\n            const maxRetriesReached = this.deps.retrySendCommandCount.value >= this.deps.retrySendCommandMax;\n\n            // Check for disconnect indicators\n            const isDisconnected = errorMsg.includes('Cannot read properties of null') ||\n                errorMsg.includes('GATT Server is disconnected') ||\n                errorMsg.includes('Device is not connected') ||\n                !this.deps.bleConnection.TowerDevice?.gatt?.connected;\n\n            if (isDisconnected) {\n                this.deps.logger.warn('Disconnect detected during command send', '[UDT]');\n                await this.deps.bleConnection.disconnect();\n                return;\n            }\n\n            if (!maxRetriesReached && this.deps.bleConnection.isConnected && !wasCancelled) {\n                this.deps.logger.info(`retrying tower command attempt ${this.deps.retrySendCommandCount.value + 1}`, '[UDT]');\n                this.deps.retrySendCommandCount.value++;\n                setTimeout(() => {\n                    this.sendTowerCommand(command);\n                }, 250 * this.deps.retrySendCommandCount.value);\n            } else {\n                this.deps.retrySendCommandCount.value = 0;\n            }\n        }\n    }\n\n    /**\n     * Initiates tower calibration to determine the current position of all tower drums.\n     * This must be performed after connection before other tower operations.\n     * @returns Promise that resolves when calibration command is sent\n     */\n    async calibrate(): Promise<void> {\n        if (!this.deps.bleConnection.performingCalibration) {\n            this.deps.logger.info('Performing Tower Calibration', '[UDT]');\n            await this.sendTowerCommand(new Uint8Array([TOWER_COMMANDS.calibration]));\n\n            // flag to look for calibration complete tower response\n            this.deps.bleConnection.performingCalibration = true;\n            this.deps.bleConnection.performingLongCommand = true;\n            return;\n        }\n\n        this.deps.logger.warn('Tower calibration requested when tower is already performing calibration', '[UDT]');\n        return;\n    }\n\n    /**\n     * Plays a sound from the tower's audio library.\n     * @param soundIndex - Index of the sound to play (1-based, must be valid in TOWER_AUDIO_LIBRARY)\n     * @returns Promise that resolves when sound command is sent\n     */\n    async playSound(soundIndex: number): Promise<void> {\n        const invalidIndex = soundIndex === null || soundIndex > (Object.keys(TOWER_AUDIO_LIBRARY).length) || soundIndex <= 0;\n        if (invalidIndex) {\n            this.deps.logger.error(`attempt to play invalid sound index ${soundIndex}`, '[UDT]');\n            return;\n        }\n\n        const soundCommand = this.deps.commandFactory.createSoundCommand(soundIndex);\n        this.deps.commandFactory.updateCommandWithCurrentDrumPositions(soundCommand, this.deps.currentDrumPositions);\n\n        this.deps.logger.info('Sending sound command', '[UDT]');\n        await this.sendTowerCommand(soundCommand);\n    }\n\n    /**\n     * Controls the tower's LED lights including doorway, ledge, and base lights.\n     * @param lights - Light configuration object specifying which lights to control and their effects\n     * @returns Promise that resolves when light command is sent\n     */\n    async lights(lights: Lights): Promise<void> {\n        const lightCommand = this.deps.commandFactory.createLightPacketCommand(lights);\n        this.deps.commandFactory.updateCommandWithCurrentDrumPositions(lightCommand, this.deps.currentDrumPositions);\n\n        this.deps.logDetail && this.deps.logger.debug(`Light Parameter ${JSON.stringify(lights)}`, '[UDT]');\n        this.deps.logger.info('Sending light command', '[UDT]');\n        await this.sendTowerCommand(lightCommand);\n    }\n\n    /**\n     * Sends a light override command to control specific light patterns.\n     * @param light - Light override value to send\n     * @param soundIndex - Optional sound to play with the light override\n     * @returns Promise that resolves when light override command is sent\n     */\n    async lightOverrides(light: number, soundIndex?: number): Promise<void> {\n        const lightOverrideCommand = this.deps.commandFactory.createLightOverrideCommand(light);\n        this.deps.commandFactory.updateCommandWithCurrentDrumPositions(lightOverrideCommand, this.deps.currentDrumPositions);\n        if (soundIndex) {\n            lightOverrideCommand[AUDIO_COMMAND_POS] = soundIndex;\n        }\n\n        this.deps.logger.info('Sending light override' + (soundIndex ? ' with sound' : ''), '[UDT]');\n        await this.sendTowerCommand(lightOverrideCommand);\n    }\n\n    /**\n     * Rotates tower drums to specified positions.\n     * @param top - Position for the top drum ('north', 'east', 'south', 'west')\n     * @param middle - Position for the middle drum\n     * @param bottom - Position for the bottom drum\n     * @param soundIndex - Optional sound to play during rotation\n     * @returns Promise that resolves when rotate command is sent\n     */\n    async rotate(top: TowerSide, middle: TowerSide, bottom: TowerSide, soundIndex?: number): Promise<void> {\n        this.deps.logDetail && this.deps.logger.debug(`Rotate Parameter TMB[${JSON.stringify(top)}|${middle}|${bottom}] S[${soundIndex}]`, '[UDT]');\n\n        const rotateCommand = this.deps.commandFactory.createRotateCommand(top, middle, bottom);\n\n        if (soundIndex) {\n            rotateCommand[AUDIO_COMMAND_POS] = soundIndex;\n        }\n\n        this.deps.logger.info('Sending rotate command' + (soundIndex ? ' with sound' : ''), '[UDT]');\n\n        // Flag that we're performing a long command \n        // drum rotation can exceed battery heartbeat check default\n        this.deps.bleConnection.performingLongCommand = true;\n        await this.sendTowerCommand(rotateCommand);\n\n        // Reset the long command flag after a delay to allow for rotation completion\n        // Drum rotation time varies based on number of drums moved\n        setTimeout(() => {\n            this.deps.bleConnection.performingLongCommand = false;\n            this.deps.bleConnection.lastBatteryHeartbeat = Date.now(); // Reset heartbeat timer\n        }, this.deps.bleConnection.longTowerCommandTimeout);\n\n        // saving drum positions\n        this.deps.currentDrumPositions.topMiddle = rotateCommand[DRUM_PACKETS.topMiddle];\n        this.deps.currentDrumPositions.bottom = rotateCommand[DRUM_PACKETS.bottom];\n    }\n\n    /**\n     * Sends a combined command to rotate drums, control lights, and play sound simultaneously.\n     * @param rotate - Rotation configuration for tower drums\n     * @param lights - Light configuration object\n     * @param soundIndex - Optional sound to play with the multi-command\n     * @returns Promise that resolves when multi-command is sent\n     */\n    async multiCommand(rotate?: RotateCommand, lights?: Lights, soundIndex?: number): Promise<void> {\n        this.deps.logDetail && this.deps.logger.debug(`MultiCommand Parameters ${JSON.stringify(rotate)} ${JSON.stringify(lights)} ${soundIndex}`, '[UDT]');\n        \n        const rotateCmd = this.deps.commandFactory.createRotateCommand(rotate.top, rotate.middle, rotate.bottom);\n        const lightCmd = this.deps.commandFactory.createLightPacketCommand(lights);\n        const soundCmd = soundIndex ? this.deps.commandFactory.createSoundCommand(soundIndex) : undefined;\n\n        const multiCmd = this.deps.commandFactory.createMultiCommand(rotateCmd, lightCmd, soundCmd);\n\n        this.sendTowerCommand(multiCmd);\n\n        const packetMsg = this.deps.responseProcessor.commandToPacketString(multiCmd);\n        this.deps.logger.info(`multiple command sent ${packetMsg}`, '[UDT]');\n    }\n\n    /**\n     * Resets the tower's internal skull drop counter to zero.\n     * @returns Promise that resolves when reset command is sent\n     */\n    async resetTowerSkullCount(): Promise<void> {\n        this.deps.logger.info('Tower skull count reset requested', '[UDT]');\n        await this.sendTowerCommand(new Uint8Array([TOWER_COMMANDS.resetCounter]));\n    }\n\n    /**\n     * Breaks one or more seals on the tower, playing appropriate sound and lighting effects.\n     * @param seal - Seal number(s) to break (1-12, where 1/5/8 are north positions)\n     * @returns Promise that resolves when seal break sequence is complete\n     */\n    async breakSeal(seal: Array<number> | number): Promise<void> {\n        // seals are numbered 1 - 12 with 1/5/8 representing north positions\n        // Top: 1-4, Middle: 5-8, Bottom: 9-12\n\n        const sealNumbers = Array.isArray(seal) ? seal : [seal];\n\n        // Define seal to side mapping based on 1/5/8 being north positions\n        const SEAL_TO_SIDE: { [key: number]: TowerSide } = {\n            1: 'north', 2: 'east', 3: 'south', 4: 'west',    // Top level\n            5: 'north', 6: 'east', 7: 'south', 8: 'west',    // Middle level  \n            9: 'north', 10: 'east', 11: 'south', 12: 'west'  // Bottom level\n        };\n\n        const SEAL_TO_LEVEL: { [key: number]: TowerLevels } = {\n            1: 'top', 2: 'top', 3: 'top', 4: 'top',\n            5: 'middle', 6: 'middle', 7: 'middle', 8: 'middle',\n            9: 'bottom', 10: 'bottom', 11: 'bottom', 12: 'bottom'\n        };\n\n        // Validate seal numbers\n        for (const sealNum of sealNumbers) {\n            if (sealNum < 1 || sealNum > 12) {\n                this.deps.logger.error(`Invalid seal number: ${sealNum}. Seals must be 1-12.`, '[UDT]');\n                return;\n            }\n        }\n\n        // Play tower seal sound\n        this.deps.logger.info('Playing tower seal sound', '[UDT]');\n        await this.playSound(TOWER_AUDIO_LIBRARY.TowerSeal.value);\n\n        // Get unique sides that need ledge lighting\n        const sidesWithBrokenSeals = [...new Set(sealNumbers.map(sealNum => SEAL_TO_SIDE[sealNum]))];\n\n        // Light both the primary ledge and adjacent ledge for each side with broken seals\n        // This ensures both left and right ledge lights are activated for each side\n        const ledgeLights: LedgeLight[] = [];\n        const adjacentSides: { [key in TowerSide]: TowerSide } = {\n            north: 'east',\n            east: 'south',\n            south: 'west',\n            west: 'north'\n        };\n\n        sidesWithBrokenSeals.forEach(side => {\n            ledgeLights.push({ position: side, style: 'on' });\n            ledgeLights.push({ position: adjacentSides[side], style: 'on' });\n        });\n\n        // Remove duplicates if any\n        const uniqueLedgeLights = ledgeLights.filter((light, index, self) =>\n            index === self.findIndex(l => l.position === light.position)\n        );\n\n        // Create doorway lights with light effect for each broken seal\n        const doorwayLights: DoorwayLight[] = sealNumbers.map(sealNum => ({\n            level: SEAL_TO_LEVEL[sealNum],\n            position: SEAL_TO_SIDE[sealNum],\n            style: 'breatheFast'\n        }));\n\n        const lights: Lights = {\n            ledge: uniqueLedgeLights,\n            doorway: doorwayLights\n        };\n\n        this.deps.logger.info(`Breaking seal(s) ${sealNumbers.join(', ')} - lighting ledges and doorways with breath effect`, '[UDT]');\n        await this.lights(lights);\n    }\n\n    /**\n     * Randomly rotates specified tower levels to random positions.\n     * @param level - Level configuration: 0=all, 1=top, 2=middle, 3=bottom, 4=top&middle, 5=top&bottom, 6=middle&bottom\n     * @returns Promise that resolves when rotation command is sent\n     */\n    async randomRotateLevels(level: number = 0): Promise<void> {\n        // 0 = all, 1 = top, 2 = middle, 3 = bottom\n        // 4 = top & middle, 5 = top & bottom, 6 = middle & bottom\n\n        const sides: TowerSide[] = ['north', 'east', 'south', 'west'];\n        const getRandomSide = (): TowerSide => sides[Math.floor(Math.random() * sides.length)];\n\n        // Current positions to preserve unchanged levels\n        const currentTop = this.getCurrentDrumPosition('top');\n        const currentMiddle = this.getCurrentDrumPosition('middle');\n        const currentBottom = this.getCurrentDrumPosition('bottom');\n\n        let topSide: TowerSide, middleSide: TowerSide, bottomSide: TowerSide;\n\n        switch (level) {\n            case 0: // all levels\n                topSide = getRandomSide();\n                middleSide = getRandomSide();\n                bottomSide = getRandomSide();\n                break;\n            case 1: // top only\n                topSide = getRandomSide();\n                middleSide = currentMiddle;\n                bottomSide = currentBottom;\n                break;\n            case 2: // middle only\n                topSide = currentTop;\n                middleSide = getRandomSide();\n                bottomSide = currentBottom;\n                break;\n            case 3: // bottom only\n                topSide = currentTop;\n                middleSide = currentMiddle;\n                bottomSide = getRandomSide();\n                break;\n            case 4: // top & middle\n                topSide = getRandomSide();\n                middleSide = getRandomSide();\n                bottomSide = currentBottom;\n                break;\n            case 5: // top & bottom\n                topSide = getRandomSide();\n                middleSide = currentMiddle;\n                bottomSide = getRandomSide();\n                break;\n            case 6: // middle & bottom\n                topSide = currentTop;\n                middleSide = getRandomSide();\n                bottomSide = getRandomSide();\n                break;\n            default:\n                this.deps.logger.error('Invalid level parameter for randomRotateLevels. Must be 0-6.', '[UDT]');\n                return;\n        }\n\n        this.deps.logger.info(`Random rotating levels to: top:${topSide}, middle:${middleSide}, bottom:${bottomSide}`, '[UDT]');\n        await this.rotate(topSide, middleSide, bottomSide);\n    }\n\n    /**\n     * Gets the current position of a specific drum level.\n     * @param level - The drum level to get position for\n     * @returns The current position of the specified drum level\n     */\n    getCurrentDrumPosition(level: 'top' | 'middle' | 'bottom'): TowerSide {\n        const drumPositions = drumPositionCmds[level];\n        const currentValue = level === 'bottom'\n            ? this.deps.currentDrumPositions.bottom\n            : (level === 'top'\n                ? (this.deps.currentDrumPositions.topMiddle & 0b00010110) // top bits\n                : (this.deps.currentDrumPositions.topMiddle & 0b11000000)); // middle bits\n\n        // Find matching side for current drum position\n        for (const [side, value] of Object.entries(drumPositions)) {\n            if (level === 'middle') {\n                // For middle, we need to mask and compare properly\n                if ((value & 0b11000000) === (currentValue & 0b11000000)) {\n                    return side as TowerSide;\n                }\n            } else if (level === 'top') {\n                // For top, compare the lower bits\n                if ((value & 0b00010110) === (currentValue & 0b00010110)) {\n                    return side as TowerSide;\n                }\n            } else {\n                // For bottom, direct comparison\n                if (value === currentValue) {\n                    return side as TowerSide;\n                }\n            }\n        }\n\n        // Default to north if no match found\n        return 'north';\n    }\n}", "import {\n  type Lights,\n  type TowerSide,\n  type RotateCommand\n} from './constants';\nimport { Logger, ConsoleOutput, type LogOutput } from './Logger';\nimport { UdtBleConnection, type ConnectionCallbacks, type ConnectionStatus } from './udtBleConnection';\nimport { TowerResponseProcessor } from './udtTowerResponse';\nimport { UdtCommandFactory } from './udtCommandFactory';\nimport { UdtTowerCommands, type TowerCommandDependencies } from './udtTowerCommands';\n\n/**\n * @title UltimateDarkTower\n * @description\n * The UltimateDarkTower class is the main control interface for the Return To Dark Tower board game device.\n * It provides a comprehensive API for interacting with the tower through Bluetooth Low Energy (BLE).\n * \n * Key Features:\n * - Bluetooth connection management with automatic monitoring and reconnection\n * - Tower calibration and drum position tracking\n * - Audio playback from the tower's built-in sound library\n * - LED light control (doorway, ledge, and base lights)\n * - Drum rotation commands with precise positioning\n * - Multi-command support for synchronized operations\n * - Seal breaking animations and effects\n * - Battery level monitoring with customizable notifications\n * - Comprehensive logging system with multiple output options\n * - Connection heartbeat monitoring for reliable disconnect detection\n * \n  * Known Issues:\n *    Tower command complete response is not being considered. Async Await is working\n *    only on the fact that a command was sent, which is pretty much immediate, so we need\n *    to rework this a bit to take into account when a command is complete. This is all\n *    part of work still to be done.\n * \n * Usage:\n * 1. Create instance: const tower = new UltimateDarkTower()\n * 2. Connect to tower: await tower.connect()\n * 3. Calibrate tower: await tower.calibrate()\n * 4. Use tower commands: await tower.playSound(1), await tower.Lights({...}), etc.\n * 5. Clean up: await tower.cleanup()\n * \n * Event Callbacks:\n * - onTowerConnect: Called when tower connects\n * - onTowerDisconnect: Called when tower disconnects\n * - onCalibrationComplete: Called when calibration finishes\n * - onSkullDrop: Called when skulls are dropped from the tower\n * - onBatteryLevelNotify: Called when battery level updates\n */\n\nclass UltimateDarkTower {\n  // logging\n  private logger: Logger;\n\n  // connection management\n  private bleConnection: UdtBleConnection;\n\n  // response processing\n  private responseProcessor: TowerResponseProcessor;\n\n  // command creation\n  private commandFactory: UdtCommandFactory;\n\n  // tower commands\n  private towerCommands: UdtTowerCommands;\n\n  // tower configuration\n  private retrySendCommandCountRef = { value: 0 };\n  retrySendCommandMax: number = 5;\n\n  // tower state\n  currentDrumPositions = { topMiddle: 0x10, bottom: 0x42 };\n\n  // call back functions\n  // you overwrite these with your own functions \n  // to handle these events in your app\n  onCalibrationComplete = () => { };\n  onSkullDrop = (_towerSkullCount: number) => { };\n  onBatteryLevelNotify = (_millivolts: number) => { };\n  onTowerConnect = () => { };\n  onTowerDisconnect = () => { };\n\n  constructor() {\n    // Initialize logger with console output by default\n    this.logger = new Logger();\n    this.logger.addOutput(new ConsoleOutput());\n\n    // Initialize BLE connection with callback handlers\n    const callbacks: ConnectionCallbacks = {\n      onTowerConnect: () => this.onTowerConnect(),\n      onTowerDisconnect: () => this.onTowerDisconnect(),\n      onBatteryLevelNotify: (millivolts: number) => this.onBatteryLevelNotify(millivolts),\n      onCalibrationComplete: () => this.onCalibrationComplete(),\n      onSkullDrop: (towerSkullCount: number) => this.onSkullDrop(towerSkullCount)\n    };\n    this.bleConnection = new UdtBleConnection(this.logger, callbacks);\n\n    // Initialize response processor\n    this.responseProcessor = new TowerResponseProcessor(this.logDetail);\n\n    // Initialize command factory\n    this.commandFactory = new UdtCommandFactory();\n\n    // Initialize tower commands with dependencies\n    const commandDependencies: TowerCommandDependencies = {\n      logger: this.logger,\n      commandFactory: this.commandFactory,\n      bleConnection: this.bleConnection,\n      responseProcessor: this.responseProcessor,\n      currentDrumPositions: this.currentDrumPositions,\n      logDetail: this.logDetail,\n      retrySendCommandCount: this.retrySendCommandCountRef,\n      retrySendCommandMax: this.retrySendCommandMax\n    };\n    this.towerCommands = new UdtTowerCommands(commandDependencies);\n  }\n\n  // utility\n  private _logDetail = false;\n\n  get logDetail(): boolean { return this._logDetail; }\n  set logDetail(value: boolean) {\n    this._logDetail = value;\n    this.responseProcessor.setDetailedLogging(value);\n    // Update dependencies if towerCommands is already initialized\n    if (this.towerCommands) {\n      const commandDependencies: TowerCommandDependencies = {\n        logger: this.logger,\n        commandFactory: this.commandFactory,\n        bleConnection: this.bleConnection,\n        responseProcessor: this.responseProcessor,\n        currentDrumPositions: this.currentDrumPositions,\n        logDetail: this.logDetail,\n        retrySendCommandCount: this.retrySendCommandCountRef,\n        retrySendCommandMax: this.retrySendCommandMax\n      };\n      this.towerCommands = new UdtTowerCommands(commandDependencies);\n    }\n  }\n\n  // Getter methods for connection state\n  get isConnected(): boolean { return this.bleConnection.isConnected; }\n  get isCalibrated(): boolean { return this.bleConnection.isCalibrated; }\n  get performingCalibration(): boolean { return this.bleConnection.performingCalibration; }\n  get performingLongCommand(): boolean { return this.bleConnection.performingLongCommand; }\n  get towerSkullDropCount(): number { return this.bleConnection.towerSkullDropCount; }\n  get txCharacteristic() { return this.bleConnection.txCharacteristic; }\n\n  // Getter/setter methods for connection configuration\n  get batteryNotifyFrequency(): number { return this.bleConnection.batteryNotifyFrequency; }\n  set batteryNotifyFrequency(value: number) { this.bleConnection.batteryNotifyFrequency = value; }\n\n  get batteryNotifyOnValueChangeOnly(): boolean { return this.bleConnection.batteryNotifyOnValueChangeOnly; }\n  set batteryNotifyOnValueChangeOnly(value: boolean) { this.bleConnection.batteryNotifyOnValueChangeOnly = value; }\n\n  get logTowerResponses(): boolean { return this.bleConnection.logTowerResponses; }\n  set logTowerResponses(value: boolean) { this.bleConnection.logTowerResponses = value; }\n\n  get logTowerResponseConfig(): any { return this.bleConnection.logTowerResponseConfig; }\n  set logTowerResponseConfig(value: any) { this.bleConnection.logTowerResponseConfig = value; }\n\n  //#region Tower Commands \n  /**\n   * Initiates tower calibration to determine the current position of all tower drums.\n   * This must be performed after connection before other tower operations.\n   * @returns {Promise<void>} Promise that resolves when calibration command is sent\n   */\n  async calibrate() {\n    return await this.towerCommands.calibrate();\n  }\n\n\n  /**\n   * Plays a sound from the tower's audio library.\n   * @param soundIndex - Index of the sound to play (1-based, must be valid in TOWER_AUDIO_LIBRARY)\n   * @returns Promise that resolves when sound command is sent\n   */\n  async playSound(soundIndex: number) {\n    return await this.towerCommands.playSound(soundIndex);\n  }\n\n  /**\n   * Controls the tower's LED lights including doorway, ledge, and base lights.\n   * @param lights - Light configuration object specifying which lights to control and their effects\n   * @returns Promise that resolves when light command is sent\n   */\n  async Lights(lights: Lights) {\n    return await this.towerCommands.lights(lights);\n  }\n\n  /**\n   * Sends a light override command to control specific light patterns.\n   * @param light - Light override value to send\n   * @param soundIndex - Optional sound to play with the light override\n   * @returns Promise that resolves when light override command is sent\n   */\n  async lightOverrides(light: number, soundIndex?: number) {\n    return await this.towerCommands.lightOverrides(light, soundIndex);\n  }\n\n  /**\n   * Rotates tower drums to specified positions.\n   * @param top - Position for the top drum ('north', 'east', 'south', 'west')\n   * @param middle - Position for the middle drum\n   * @param bottom - Position for the bottom drum\n   * @param soundIndex - Optional sound to play during rotation\n   * @returns Promise that resolves when rotate command is sent\n   */\n  async Rotate(top: TowerSide, middle: TowerSide, bottom: TowerSide, soundIndex?: number) {\n    return await this.towerCommands.rotate(top, middle, bottom, soundIndex);\n  }\n\n  /**\n   * DO NOT USE THIS FUNCTION - MULTIPLE SIMULTANEOUS ACTIONS CAN CAUSE TOWER DISCONNECTION\n   * Sends a combined command to rotate drums, control lights, and play sound simultaneously.\n   * @param rotate - Rotation configuration for tower drums\n   * @param lights - Light configuration object\n   * @param soundIndex - Optional sound to play with the multi-command\n   * @returns Promise that resolves when multi-command is sent\n   * @deprecated SPECIAL USE ONLY - CAN CAUSE DISCONNECTS\n   */\n  async MultiCommand(rotate?: RotateCommand, lights?: Lights, soundIndex?: number) {\n    return await this.towerCommands.multiCommand(rotate, lights, soundIndex);\n  }\n\n  /**\n   * Resets the tower's internal skull drop counter to zero.\n   * @returns Promise that resolves when reset command is sent\n   */\n  async resetTowerSkullCount() {\n    return await this.towerCommands.resetTowerSkullCount();\n  }\n\n  //#endregion\n\n  /**\n   * Breaks one or more seals on the tower, playing appropriate sound and lighting effects.\n   * @param seal - Seal number(s) to break (1-12, where 1/5/8 are north positions)\n   * @returns Promise that resolves when seal break sequence is complete\n   */\n  async breakSeal(seal: Array<number> | number) {\n    return await this.towerCommands.breakSeal(seal);\n  }\n\n  /**\n   * Randomly rotates specified tower levels to random positions.\n   * @param level - Level configuration: 0=all, 1=top, 2=middle, 3=bottom, 4=top&middle, 5=top&bottom, 6=middle&bottom\n   * @returns Promise that resolves when rotation command is sent\n   */\n  async randomRotateLevels(level: number = 0) {\n    return await this.towerCommands.randomRotateLevels(level);\n  }\n\n  /**\n   * Gets the current position of a specific drum level.\n   * @param level - The drum level to get position for\n   * @returns The current position of the specified drum level\n   */\n  getCurrentDrumPosition(level: 'top' | 'middle' | 'bottom'): TowerSide {\n    return this.towerCommands.getCurrentDrumPosition(level);\n  }\n\n  //#region bluetooth\n\n  /**\n   * Establishes a Bluetooth connection to the Dark Tower device.\n   * Initializes GATT services, characteristics, and starts connection monitoring.\n   * @returns {Promise<void>} Promise that resolves when connection is established\n   */\n  async connect() {\n    await this.bleConnection.connect();\n  }\n\n  /**\n   * Disconnects from the tower device and cleans up resources.\n   * @returns {Promise<void>} Promise that resolves when disconnection is complete\n   */\n  async disconnect() {\n    await this.bleConnection.disconnect();\n  }\n\n  //#endregion\n\n  //#region utility\n\n  /**\n   * Configure logger outputs for this UltimateDarkTower instance\n   * @param {LogOutput[]} outputs - Array of log outputs to use (e.g., ConsoleOutput, DOMOutput)\n   */\n  setLoggerOutputs(outputs: LogOutput[]) {\n    // Clear existing outputs and add new ones to maintain logger instance references\n    (this.logger as any).outputs = [];\n    outputs.forEach(output => this.logger.addOutput(output));\n  }\n\n  /**\n   * Sends a command packet to the tower via Bluetooth with error handling and retry logic.\n   * @param {Uint8Array} command - The command packet to send to the tower\n   * @returns {Promise<void>} Promise that resolves when command is sent successfully\n   */\n  async sendTowerCommand(command: Uint8Array) {\n    return await this.towerCommands.sendTowerCommand(command);\n  }\n\n  /**\n   * Converts a command packet to a hex string representation for debugging.\n   * @param {Uint8Array} command - Command packet to convert\n   * @returns {string} Hex string representation of the command packet\n   */\n  commandToPacketString(command: Uint8Array): string {\n    return this.responseProcessor.commandToPacketString(command);\n  }\n\n  /**\n   * Converts battery voltage in millivolts to percentage.\n   * @param {number} mv - Battery voltage in millivolts\n   * @returns {string} Battery percentage as formatted string (e.g., \"75%\")\n   */\n  millVoltsToPercentage(mv: number): string {\n    return this.responseProcessor.millVoltsToPercentage(mv);\n  }\n\n  //#endregion\n\n  //#region Connection Management\n\n  /**\n   * Enable or disable connection monitoring\n   * @param {boolean} enabled - Whether to enable connection monitoring\n   */\n  setConnectionMonitoring(enabled: boolean) {\n    this.bleConnection.setConnectionMonitoring(enabled);\n  }\n\n  /**\n   * Configure connection monitoring parameters\n   * @param {number} [frequency=2000] - How often to check connection (milliseconds)\n   * @param {number} [timeout=30000] - How long to wait for responses before considering connection lost (milliseconds)\n   */\n  configureConnectionMonitoring(frequency: number = 2000, timeout: number = 30000) {\n    this.bleConnection.configureConnectionMonitoring(frequency, timeout);\n  }\n\n  /**\n   * Configure battery heartbeat monitoring parameters\n   * Tower sends battery status every ~200ms, so this is the most reliable disconnect indicator\n   * @param {boolean} [enabled=true] - Whether to enable battery heartbeat monitoring\n   * @param {number} [timeout=3000] - How long to wait for battery status before considering disconnected (milliseconds)\n   * @param {boolean} [verifyConnection=true] - Whether to verify connection status before triggering disconnection on heartbeat timeout\n   */\n  configureBatteryHeartbeatMonitoring(enabled: boolean = true, timeout: number = 3000, verifyConnection: boolean = true) {\n    this.bleConnection.configureBatteryHeartbeatMonitoring(enabled, timeout, verifyConnection);\n  }\n\n  /**\n   * Check if the tower is currently connected\n   * @returns {Promise<boolean>} True if connected and responsive\n   */\n  async isConnectedAndResponsive(): Promise<boolean> {\n    return await this.bleConnection.isConnectedAndResponsive();\n  }\n\n  /**\n   * Get detailed connection status including heartbeat information\n   * @returns {Object} Object with connection details\n   */\n  getConnectionStatus(): ConnectionStatus {\n    return this.bleConnection.getConnectionStatus();\n  }\n  //#endregion\n\n  //#region cleanup\n\n  /**\n   * Clean up resources and disconnect properly\n   * @returns {Promise<void>} Promise that resolves when cleanup is complete\n   */\n  async cleanup() {\n    this.logger.info('Cleaning up UltimateDarkTower instance', '[UDT]');\n    await this.bleConnection.cleanup();\n  }\n\n  //#endregion\n}\n\nexport default UltimateDarkTower;\n", "/**\n * UltimateDarkTower - Main entry point\n * Export the main class and constants for public use\n */\n\nexport { default as UltimateDarkTower } from './UltimateDarkTower';\nexport * from './constants';\nexport { logger, Logger, ConsoleOutput, DOMOutput, type LogLevel, type LogOutput } from './Logger';\n\n// For convenience, also export as default\nimport UltimateDarkTower from './UltimateDarkTower';\nexport default UltimateDarkTower;\n", "import UltimateDarkTower, {\n  type TowerSide,\n  type TowerLevels,\n  type DoorwayLight,\n  type LedgeLight,\n  type BaseLight,\n  type BaseLightLevel,\n  type Lights,\n  TOWER_AUDIO_LIBRARY,\n  TOWER_LIGHT_SEQUENCES,\n  LIGHT_EFFECTS\n} from '../../src';\nimport { logger, DOMOutput, ConsoleOutput } from '../../src/Logger';\n\nconst Tower = new UltimateDarkTower();\n\n// Setup loggers with DOM output after DOM is ready\nconst initializeLogger = () => {\n  // Configure Tower to use both console and DOM output\n  Tower.setLoggerOutputs([new ConsoleOutput(), new DOMOutput('log-container')]);\n  \n  // Enable detailed logging to see all [UDT] messages\n  Tower.logDetail = true;\n  \n  // Configure TowerController logger\n  logger.addOutput(new DOMOutput('log-container'));\n  logger.info('Logger initialized with DOM output', '[TC]');\n};\n\n// Initialize logger when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeLogger);\n} else {\n  initializeLogger();\n}\n\n// Expose constants globally for the inline script\n(window as any).TOWER_AUDIO_LIBRARY = TOWER_AUDIO_LIBRARY;\n(window as any).TOWER_LIGHT_SEQUENCES = TOWER_LIGHT_SEQUENCES;\n(window as any).LIGHT_EFFECTS = LIGHT_EFFECTS;\n// Expose Tower instance and logger globally\n(window as any).Tower = Tower;\n(window as any).logger = logger;\n\n// skull drop callback\nconst updateSkullDropCount = (count: number) => {\n  const el = document.getElementById(\"skull-count\");\n  if (el) {\n    el.innerText = count.toString();\n  }\n}\nTower.onSkullDrop = updateSkullDropCount;\n\nasync function connectToTower() {\n  logger.info(\"Attempting to connect to tower...\", '[TC]');\n  try {\n    await Tower.connect();\n  } catch (error) {\n    logger.error(`Connection failed: ${error}`, '[TC]');\n  }\n}\n\nconst onTowerConnected = () => {\n  const el = document.getElementById(\"tower-connection-state\");\n  if (el) {\n    el.innerText = \"Tower Connected\"\n    el.style.background = 'rgb(2 255 14 / 30%)';\n  }\n  logger.info(\"Tower connected successfully\", '[TC]');\n}\nTower.onTowerConnect = onTowerConnected;\n\nconst onTowerDisconnected = () => {\n  const el = document.getElementById(\"tower-connection-state\");\n  if (el) {\n    el.innerText = \"Tower Disconnected\";\n    el.style.background = 'rgb(255 1 1 / 30%)';\n  }\n  logger.warn(\"Tower disconnected\", '[TC]');\n}\nTower.onTowerDisconnect = onTowerDisconnected;\n\nasync function calibrate() {\n  if (!Tower.isConnected) {\n    return;\n  }\n  await Tower.calibrate();\n  const el = document.getElementById(\"calibrating-message\");\n  if (el) {\n    el.classList.remove(\"hide\");\n  }\n}\n\nconst onCalibrationComplete = () => {\n  const el = document.getElementById(\"calibrating-message\");\n  if (el) {\n    el.classList.add(\"hide\");\n  }\n}\nTower.onCalibrationComplete = onCalibrationComplete;\n\nconst onBatteryLevelNotify = (millivolts: number) => {\n  const el = document.getElementById(\"battery\");\n  if (el) {\n    el.innerText = Tower.millVoltsToPercentage(millivolts).toString();\n  }\n}\nTower.onBatteryLevelNotify = onBatteryLevelNotify;\n\nasync function resetSkullCount() {\n  if (!Tower.isConnected) {\n    return;\n  }\n  Tower.resetTowerSkullCount();\n  updateSkullDropCount(0);\n}\n\nconst playSound = () => {\n  const select = document.getElementById(\"sounds\") as HTMLInputElement;\n  Tower.playSound(Number(select.value));\n}\n\nconst overrides = () => {\n  const select = document.getElementById(\"lightOverrideDropDown\") as HTMLInputElement;\n  Tower.lightOverrides(Number(select.value));\n}\n\nconst rotate = () => {\n  const top = document.getElementById(\"top\") as HTMLInputElement;\n  const middle = document.getElementById(\"middle\") as HTMLInputElement;\n  const bottom = document.getElementById(\"bottom\") as HTMLInputElement;\n  const sound = document.getElementById(\"sounds\") as HTMLInputElement;\n  Tower.Rotate(\n    top.value as TowerSide,\n    middle.value as TowerSide,\n    bottom.value as TowerSide, Number(sound.value)\n  );\n}\n\nconst breakSeal = async () => {\n  const select = document.getElementById(\"sealSelect\") as HTMLSelectElement;\n  const sealValue = select.value;\n  \n  if (!sealValue) {\n    logger.warn(\"No seal selected\", '[TC]');\n    return;\n  }\n  \n  // Map seal names to numbers (1-12 based on the UltimateDarkTower breakSeal method)\n  const sealMap: { [key: string]: number } = {\n    \"North Top\": 1,\n    \"East Top\": 2, \n    \"South Top\": 3,\n    \"West Top\": 4,\n    \"North Middle\": 5,\n    \"East Middle\": 6,\n    \"South Middle\": 7, \n    \"West Middle\": 8,\n    \"North Bottom\": 9,\n    \"East Bottom\": 10,\n    \"South Bottom\": 11,\n    \"West Bottom\": 12\n  };\n  \n  const sealNumber = sealMap[sealValue];\n  if (sealNumber) {\n    await Tower.breakSeal(sealNumber);\n  }\n}\n\nconst clearAllLights = async () => {\n  // Create lights object with all lights set to off\n  const allLightsOff: Lights = {\n    doorway: [\n      { position: 'north', level: 'top', style: 'off' },\n      { position: 'north', level: 'middle', style: 'off' },\n      { position: 'north', level: 'bottom', style: 'off' },\n      { position: 'east', level: 'top', style: 'off' },\n      { position: 'east', level: 'middle', style: 'off' },\n      { position: 'east', level: 'bottom', style: 'off' },\n      { position: 'south', level: 'top', style: 'off' },\n      { position: 'south', level: 'middle', style: 'off' },\n      { position: 'south', level: 'bottom', style: 'off' },\n      { position: 'west', level: 'top', style: 'off' },\n      { position: 'west', level: 'middle', style: 'off' },\n      { position: 'west', level: 'bottom', style: 'off' }\n    ],\n    ledge: [\n      { position: 'north', style: 'off' },\n      { position: 'east', style: 'off' },\n      { position: 'south', style: 'off' },\n      { position: 'west', style: 'off' }\n    ],\n    base: [\n      { position: { side: 'north', level: 'top' }, style: 'off' },\n      { position: { side: 'north', level: 'bottom' }, style: 'off' },\n      { position: { side: 'east', level: 'top' }, style: 'off' },\n      { position: { side: 'east', level: 'bottom' }, style: 'off' },\n      { position: { side: 'south', level: 'top' }, style: 'off' },\n      { position: { side: 'south', level: 'bottom' }, style: 'off' },\n      { position: { side: 'west', level: 'top' }, style: 'off' },\n      { position: { side: 'west', level: 'bottom' }, style: 'off' }\n    ]\n  };\n  \n  await Tower.Lights(allLightsOff);\n  logger.info(\"All lights cleared\", '[TC]');\n}\n\nconst singleLight = (el: HTMLInputElement) => {\n  let style: string = \"off\";\n  if (el.checked) {\n    const ls = document.getElementById(\"lightStyles\") as HTMLSelectElement;\n    if (ls && ls.selectedIndex >= 0) {\n      style = ls.options[ls.selectedIndex].innerHTML;\n    }\n  }\n  el.setAttribute('data-light-style', style);\n  lights();\n}\n\nconst lights = () => {\n  const doorwayLights: Array<DoorwayLight> = getDoorwayLights();\n  const ledgeLights: Array<LedgeLight> = getLedgeLights();\n  const baseLights: Array<BaseLight> = getBaseLights();\n  const allLights = { doorway: doorwayLights, ledge: ledgeLights, base: baseLights };\n  Tower.Lights(allLights);\n}\n\nconst getDoorwayLights = (): Array<DoorwayLight> => {\n  const qs = 'input[type=\"checkbox\"][data-light-type=\"doorway\"]:checked'\n  const checked = document.querySelectorAll(qs) as NodeListOf<HTMLInputElement>;\n  const ls = document.getElementById(\"lightStyles\") as HTMLSelectElement;\n  const selectedLightStyle = ls?.options[ls.selectedIndex]?.textContent || \"off\";\n  let doorwayCmds: Array<DoorwayLight> = [];\n  Array.from(checked).forEach(cb => {\n    let { lightSide, lightStyle, lightLevel } = getDataAttributes(cb);\n    if (lightStyle !== selectedLightStyle) {\n      lightStyle = selectedLightStyle;\n      cb.setAttribute('data-light-style', lightStyle);\n    }\n    if (lightSide && lightLevel && lightStyle) {\n      doorwayCmds.push({ position: lightSide as TowerSide, level: lightLevel as TowerLevels, style: lightStyle });\n    }\n  });\n  return doorwayCmds;\n}\n\nconst getLedgeLights = (): Array<LedgeLight> => {\n  const qs = 'input[type=\"checkbox\"][data-light-type=\"ledge\"]:checked';\n  const checked = document.querySelectorAll(qs) as NodeListOf<HTMLInputElement>;\n  let ledgeCmds: Array<LedgeLight> = [];\n  Array.from(checked).forEach(cb => {\n    const { lightSide, lightStyle } = getDataAttributes(cb);\n    if (lightSide && lightStyle) {\n      ledgeCmds.push({ position: lightSide as TowerSide, style: lightStyle });\n    }\n  });\n  return ledgeCmds;\n}\n\nconst getBaseLights = (): Array<BaseLight> => {\n  const qs = 'input[type=\"checkbox\"][data-light-type=\"base\"]:checked';\n  const checked = document.querySelectorAll(qs) as NodeListOf<HTMLInputElement>;\n  let baseCmds: Array<BaseLight> = [];\n  Array.from(checked).forEach(cb => {\n    const { lightSide, lightStyle, lightBaseLocation } = getDataAttributes(cb);\n    if (lightSide && lightStyle && lightBaseLocation) {\n      baseCmds.push({\n        position: {\n          side: lightSide as TowerSide,\n          level: lightBaseLocation as BaseLightLevel\n        },\n        style: lightStyle\n      });\n    }\n  });\n\n  return baseCmds;\n}\n\nconst getDataAttributes = (el: HTMLElement) => {\n  const lightType = el.getAttribute('data-light-type');\n  const lightSide = el.getAttribute('data-light-location');\n  const lightLevel = el.getAttribute('data-light-level');\n  const lightBaseLocation = el.getAttribute('data-light-base-location');\n  const lightStyle = el.getAttribute('data-light-style');\n\n  return ({\n    lightSide: lightSide,\n    lightLevel: lightLevel,\n    lightBaseLocation: lightBaseLocation,\n    lightStyle: lightStyle,\n    lightType: lightType,\n  });\n}\n\n// Expose functions globally for HTML onclick handlers\n(window as any).connectToTower = connectToTower;\n(window as any).calibrate = calibrate;\n(window as any).resetSkullCount = resetSkullCount;\n(window as any).playSound = playSound;\n(window as any).singleLight = singleLight;\n(window as any).lights = lights;\n(window as any).overrides = overrides;\n(window as any).rotate = rotate;\n(window as any).breakSeal = breakSeal;\n(window as any).clearAllLights = clearAllLights;"],
  "mappings": "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",
  "names": ["logger", "lights", "lights", "rotate", "lights", "rotate"]
}
