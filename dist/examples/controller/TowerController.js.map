{
  "version": 3,
  "sources": ["../../../src/constants.ts", "../../../src/UltimateDarkTower.ts", "../../../src/index.ts", "../../../examples/controller/TowerController.ts"],
  "sourcesContent": ["\n// Nordic Semicondutor's UART/Serial IDs for Bluetooth LE\nexport const UART_SERVICE_UUID = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const UART_TX_CHARACTERISTIC_UUID = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const UART_RX_CHARACTERISTIC_UUID = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";\nexport const TOWER_DEVICE_NAME = \"ReturnToDarkTower\";\nexport type CommandPacket = Uint8Array;\n\n// tower commands \nexport const TOWER_COMMANDS = {\n  towerState: 0, // not a sendable command\n  doorReset: 1,\n  unjamDrums: 2,\n  resetCounter: 3,\n  calibration: 4,\n  overwriteDrumStates: 5,\n  // go no further!\n};\n// tower commands enum\nexport const TC = {\n  STATE: \"TOWER_STATE\",\n  INVALID_STATE: \"INVALID_STATE\",\n  FAILURE: \"HARDWARE_FAILURE\",\n  JIGGLE: \"MECH_JIGGLE_TRIGGERED\",\n  UNEXPECTED: \"MECH_UNEXPECTED_TRIGGER\",\n  DURATION: \"MECH_DURATION\",\n  DIFFERENTIAL: \"DIFFERENTIAL_READINGS\",\n  CALIBRATION: \"CALIBRATION_FINISHED\",\n  BATTERY: \"BATTERY_READING\",\n}\n\nexport const DRUM_PACKETS = {\n  topMiddle: 1,\n  bottom: 2,\n}\n\nexport const LIGHT_PACKETS = {\n  doorway: {\n    top: { north: 3, east: 3, south: 4, west: 4 },\n    middle: { north: 5, east: 5, south: 6, west: 6 },\n    bottom: { north: 7, east: 7, south: 8, west: 8 },\n  },\n  base: {\n    north: { a: 12, b: 14 },\n    east: { a: 11, b: 13 },\n    south: { a: 11, b: 13 },\n    west: { a: 12, b: 14 },\n  },\n  ledge: { north: 10, west: 10, south: 9, east: 9 },\n  overrides: 19,\n}\n\nexport type Glyphs = \"cleanse\" | \"quest\" | \"battle\" | \"banner\" | \"reinforce\";\n\n// positions based on calibrated drum orientation\nexport const GLYPHS = {\n  cleanse: { name: \"Cleanse\", level: \"top\", side: \"north\" },\n  quest: { name: \"Quest\", level: \"top\", side: \"south\" },\n  battle: { name: \"Battle\", level: \"middle\", side: \"north\" },\n  banner: { name: \"Banner\", level: \"bottom\", side: \"north\" },\n  reinforce: { name: \"Reinforce\", level: \"bottom\", side: \"south\" },\n}\n\nexport const AUDIO_COMMAND_POS = 15;\nexport const SKULL_DROP_COUNT_POS = 17;\n\nexport type TowerLevels = \"top\" | \"middle\" | \"bottom\";\nexport type TowerSide = \"north\" | \"south\" | \"east\" | \"west\";\n\nexport type LightTypes = \"base\" | \"doorway\" | \"ledge\";\n\nexport type DoorwayLight = { position: TowerSide, level: TowerLevels, style: string };\n\nexport type LedgeLight = { position: TowerSide, style: string };\n\nexport type BaseLightLevel = \"top\" | \"bottom\";\nexport type BaseLightPosition = { side: TowerSide, level: BaseLightLevel };\nexport type BaseLight = { position: BaseLightPosition, style: string }\n\nexport type Lights = {\n  doorway?: Array<DoorwayLight>,\n  ledge?: Array<LedgeLight>,\n  base?: Array<BaseLight>\n};\n\nexport type RotateCommand = {\n  top: TowerSide,\n  middle: TowerSide,\n  bottom: TowerSide\n}\n\n// prettier-ignore\nexport const drumPositionCmds = {\n  top: { north: 0b00010000, west: 0b00000010, south: 0b00010100, east: 0b00010110 }, // bits 1-8\n  middle: { north: 0b00010000, west: 0b01000000, south: 0b10010000, east: 0b11010000 }, // bits 1-4\n  bottom: { north: 0b01000010, west: 0b01001010, south: 0b01010010, east: 0b01011010 },\n}\n\nexport const BASE_LEDGE_LIGHTS_TO_BIT_SHIFT = [\"east\", \"west\"];\nexport const DOORWAY_LIGHTS_TO_BIT_SHIFT = [\"north\", \"south\"];\n\nexport const LIGHT_EFFECTS = {\n  on: 0x3,\n  off: 0,\n  breathe: 5,\n  breatheFast: 7,\n  breathe50percent: 9,\n  flicker: 0xb,\n}\n\n\nexport const TOWER_LIGHT_SEQUENCES = {\n  twinkle: 0x01,\n  flareThenFade: 0x02,\n  flareThenFadeBase: 0x03,\n  flareThenFlicker: 0x04,\n  angryStrobe01: 0x05,\n  angryStrobe02: 0x06,\n  angryStrobe03: 0x07,\n  gloat01: 0x08,\n  gloat02: 0x09,\n  gloat03: 0x0a,\n  defeat: 0x0b,\n  victory: 0x0c,\n  dungeonIdle: 0x0d,\n  sealReveal: 0x0e,\n  rotationAllDrums: 0x0f,\n  rotationDrumTop: 0x10,\n  rotationDrumMiddle: 0x11,\n  rotationDrumBottom: 0x12,\n  monthStarted: 0x13,\n}\n\nexport type SoundCategory =\n  \"Adversary\" | \"Ally\" | \"Battle\" |\n  \"Classic\" | \"Unlisted\" | \"Dungeon\" | \"Foe\" |\n  \"Spawn\" | \"Quest\" | \"Glyph\" | \"State\" | \"Seals\";\n\nexport type AudioLibrary = {\n  [name: string]: {\n    name: string,\n    value: number,\n    category: SoundCategory\n  }\n}\n\n// prettier-ignore\nexport const TOWER_AUDIO_LIBRARY: AudioLibrary = {\n  Ashstrider: { name: \"Ashstrider\", value: 0x01, category: \"Adversary\" },\n  BaneofOmens: { name: \"Bane of Omens\", value: 0x02, category: \"Adversary\" },\n  EmpressofShades: { name: \"Empress of Shades\", value: 0x03, category: \"Adversary\" },\n  GazeEternal: { name: \"Gaze Eternal\", value: 0x04, category: \"Adversary\" },\n  Gravemaw: { name: \"Gravemaw\", value: 0x05, category: \"Adversary\" },\n  IsatheHollow: { name: \"Isa the Hollow\", value: 0x06, category: \"Adversary\" },\n  LingeringRot: { name: \"Lingering Rot\", value: 0x07, category: \"Adversary\" },\n  UtukKu: { name: \"Utuk'Ku\", value: 0x08, category: \"Adversary\" },\n  Gleb: { name: \"Gleb\", value: 0x09, category: \"Ally\" },\n  Grigor: { name: \"Grigor\", value: 0x0A, category: \"Ally\" },\n  Hakan: { name: \"Hakan\", value: 0x0B, category: \"Ally\" },\n  Letha: { name: \"Letha\", value: 0x0C, category: \"Ally\" },\n  Miras: { name: \"Miras\", value: 0x0D, category: \"Ally\" },\n  Nimet: { name: \"Nimet\", value: 0x0E, category: \"Ally\" },\n  Tomas: { name: \"Tomas\", value: 0x0F, category: \"Ally\" },\n  Vasa: { name: \"Vasa\", value: 0x10, category: \"Ally\" },\n  Yana: { name: \"Yana\", value: 0x11, category: \"Ally\" },\n  Zaida: { name: \"Zaida\", value: 0x12, category: \"Ally\" },\n  ApplyAdvantage01: { name: \"Apply Advantage 01\", value: 0x13, category: \"Battle\" },\n  ApplyAdvantage02: { name: \"Apply Advantage 02\", value: 0x14, category: \"Battle\" },\n  ApplyAdvantage03: { name: \"Apply Advantage 03\", value: 0x15, category: \"Battle\" },\n  ApplyAdvantage04: { name: \"Apply Advantage 04\", value: 0x16, category: \"Battle\" },\n  ApplyAdvantage05: { name: \"Apply Advantage 05\", value: 0x17, category: \"Battle\" },\n  MaxAdvantages: { name: \"Max Advantages\", value: 0x18, category: \"Battle\" },\n  NoAdvantages: { name: \"No Advantages\", value: 0x19, category: \"Battle\" },\n  AdversaryEscaped: { name: \"Adversary Escaped\", value: 0x1A, category: \"Battle\" },\n  BattleButton: { name: \"Battle Button\", value: 0x1B, category: \"Battle\" },\n  CardFlip01: { name: \"Card Flip 01\", value: 0x1C, category: \"Battle\" },\n  CardFlip02: { name: \"Card Flip 02\", value: 0x1D, category: \"Battle\" },\n  CardFlip03: { name: \"Card Flip 03\", value: 0x1E, category: \"Battle\" },\n  CardFlipPaper01: { name: \"Card Flip Paper 01\", value: 0x1F, category: \"Battle\" },\n  CardFlipPaper02: { name: \"Card Flip Paper 02\", value: 0x20, category: \"Battle\" },\n  CardFlipPaper03: { name: \"Card Flip Paper 03\", value: 0x21, category: \"Battle\" },\n  CardSelect01: { name: \"Card Select 01\", value: 0x22, category: \"Battle\" },\n  CardSelect02: { name: \"Card Select 02\", value: 0x23, category: \"Battle\" },\n  CardSelect03: { name: \"Card Select 03\", value: 0x24, category: \"Battle\" },\n  BattleStart: { name: \"Battle Start\", value: 0x25, category: \"Battle\" },\n  BattleVictory: { name: \"Battle Victory\", value: 0x26, category: \"Battle\" },\n  ButtonHoldPressCombo: { name: \"Button Hold Press Combo\", value: 0x27, category: \"Battle\" },\n  ButtonHold: { name: \"Button Hold\", value: 0x28, category: \"Battle\" },\n  ButtonPress: { name: \"Button Press\", value: 0x29, category: \"Battle\" },\n  ClassicAdvantageApplied: { name: \"8-bit Advantage\", value: 0x2A, category: \"Classic\" },\n  ClassicAttackTower: { name: \"8-bit Attack Tower\", value: 0x2B, category: \"Classic\" },\n  ClassicBazaar: { name: \"8-bit Bazaar\", value: 0x2C, category: \"Classic\" },\n  ClassicConfirmation: { name: \"8-bit Confirmation\", value: 0x2D, category: \"Classic\" },\n  ClassicDragons: { name: \"8-bit Dragons\", value: 0x2E, category: \"Classic\" },\n  ClassicQuestFailed: { name: \"8-bit Quest Failed\", value: 0x2F, category: \"Classic\" },\n  ClassicRetreat: { name: \"8-bit Retreat\", value: 0x30, category: \"Classic\" },\n  ClassicStartMonth: { name: \"8-bit Start Month\", value: 0x31, category: \"Classic\" },\n  ClassicStartDungeon: { name: \"8-bit Start Dungeon\", value: 0x32, category: \"Classic\" },\n  ClassicTowerLost: { name: \"8-bit Tower Lost\", value: 0x33, category: \"Classic\" },\n  ClassicUnsure: { name: \"8-bit Unsure\", value: 0x34, category: \"Classic\" },\n  DungeonAdvantage01: { name: \"Dungeon Advantage 01\", value: 0x35, category: \"Dungeon\" },\n  DungeonAdvantage02: { name: \"Dungeon Advantage 02\", value: 0x36, category: \"Dungeon\" },\n  DungeonButton: { name: \"Dungeon Button\", value: 0x37, category: \"Dungeon\" },\n  DungeonFootsteps: { name: \"Dungeon Footsteps\", value: 0x38, category: \"Dungeon\" },\n  DungeonCaves: { name: \"Dungeon Caves\", value: 0x39, category: \"Dungeon\" },\n  DungeonComplete: { name: \"Dungeon Complete\", value: 0x3A, category: \"Dungeon\" },\n  DungeonEncampment: { name: \"Dungeon Encampment\", value: 0x3B, category: \"Dungeon\" },\n  DungeonEscape: { name: \"Dungeon Escape\", value: 0x3C, category: \"Dungeon\" },\n  DungeonFortress: { name: \"Dungeon Fortress\", value: 0x3D, category: \"Dungeon\" },\n  DungeonRuins: { name: \"Dungeon Ruins\", value: 0x3E, category: \"Dungeon\" },\n  DungeonShrine: { name: \"Dungeon Shrine\", value: 0x3F, category: \"Dungeon\" },\n  DungeonTomb: { name: \"Dungeon Tomb\", value: 0x40, category: \"Dungeon\" },\n  FoeEvent: { name: \"Foe Event\", value: 0x41, category: \"Foe\" },\n  FoeSpawn: { name: \"Foe Spawn\", value: 0x42, category: \"Foe\" },\n  Brigands: { name: \"Brigands\", value: 0x43, category: \"Foe\" },\n  ClanofNeuri: { name: \"Clan of Neuri\", value: 0x44, category: \"Foe\" },\n  Dragons: { name: \"Dragons\", value: 0x45, category: \"Foe\" },\n  Lemures: { name: \"Lemures\", value: 0x46, category: \"Foe\" },\n  LeveledUp: { name: \"Leveled Up\", value: 0x47, category: \"Foe\" },\n  Mormos: { name: \"Mormos\", value: 0x48, category: \"Foe\" },\n  Oreks: { name: \"Oreks\", value: 0x49, category: \"Foe\" },\n  ShadowWolves: { name: \"Shadow Wolves\", value: 0x4A, category: \"Foe\" },\n  SpineFiends: { name: \"Spine Fiends\", value: 0x4B, category: \"Foe\" },\n  Strigas: { name: \"Strigas\", value: 0x4C, category: \"Foe\" },\n  Titans: { name: \"Titans\", value: 0x4D, category: \"Foe\" },\n  FrostTrolls: { name: \"Frost Trolls\", value: 0x4E, category: \"Foe\" },\n  WidowmadeSpiders: { name: \"Widowmade Spiders\", value: 0x4F, category: \"Foe\" },\n  AshstriderSpawn: { name: \"Ashstrider Spawn\", value: 0x50, category: \"Spawn\" },\n  BaneofOmensSpawn: { name: \"Bane of Omens Spawn\", value: 0x51, category: \"Spawn\" },\n  EmpressofShadesSpawn: { name: \"Empress of Shades Spawn\", value: 0x52, category: \"Spawn\" },\n  GazeEternalSpawn: { name: \"Gaze Eternal Spawn\", value: 0x53, category: \"Spawn\" },\n  GravemawSpawn: { name: \"Gravemaw Spawn\", value: 0x54, category: \"Spawn\" },\n  IsatheHollowSpawn: { name: \"Isa the Hollow Spawn\", value: 0x55, category: \"Spawn\" },\n  LingeringRotSpawn: { name: \"Lingering Rot Spawn\", value: 0x56, category: \"Spawn\" },\n  UtukKuSpawn: { name: \"Utuk'Ku Spawn\", value: 0x57, category: \"Spawn\" },\n  QuestComplete: { name: \"Quest Complete\", value: 0x58, category: \"Quest\" },\n  TowerAllGlyphs: { name: \"Tower All Glyphs\", value: 0x59, category: \"Glyph\" },\n  TowerAngry1: { name: \"Tower Angry 1\", value: 0x5A, category: \"Glyph\" },\n  TowerAngry2: { name: \"Tower Angry 2\", value: 0x5B, category: \"Glyph\" },\n  TowerAngry3: { name: \"Tower Angry 3\", value: 0x5C, category: \"Glyph\" },\n  TowerAngry4: { name: \"Tower Angry 4\", value: 0x5D, category: \"Glyph\" },\n  TowerConnected: { name: \"Tower Connected\", value: 0x5E, category: \"State\" },\n  GameStart: { name: \"Game Start\", value: 0x5F, category: \"State\" },\n  TowerGloat1: { name: \"Tower Gloat 1\", value: 0x60, category: \"State\" },\n  TowerGloat2: { name: \"Tower Gloat 2\", value: 0x61, category: \"State\" },\n  TowerGloat3: { name: \"Tower Gloat 3\", value: 0x62, category: \"State\" },\n  TowerGlyph: { name: \"Tower Glyph\", value: 0x63, category: \"State\" },\n  TowerIdle1: { name: \"Tower Idle 1\", value: 0x64, category: \"State\" },\n  TowerIdle2: { name: \"Tower Idle 2\", value: 0x65, category: \"State\" },\n  TowerIdle3: { name: \"Tower Idle 3\", value: 0x66, category: \"State\" },\n  TowerIdle4: { name: \"Tower Idle 4\", value: 0x67, category: \"State\" },\n  TowerIdle5: { name: \"Tower Idle 5\", value: 0x68, category: \"Unlisted\" },\n  TowerDisconnected: { name: \"Tower Disconnect\", value: 0x69, category: \"State\" },\n  MonthEnded: { name: \"Month Ended\", value: 0x6A, category: \"State\" },\n  MonthStarted: { name: \"Month Started\", value: 0x6B, category: \"State\" },\n  QuestFailed: { name: \"Quest Failed\", value: 0x6C, category: \"Quest\" },\n  RotateExit: { name: \"Rotate Exit\", value: 0x6D, category: \"Seals\" },\n  RotateLoop: { name: \"Rotate Loop\", value: 0x6E, category: \"Seals\" },\n  RotateStart: { name: \"Rotate Start\", value: 0x6F, category: \"Seals\" },\n  TowerSeal: { name: \"Tower Seal\", value: 0x70, category: \"Seals\" },\n  TowerSkullDropped: { name: \"Tower Skull Dropped\", value: 0x71, category: \"State\" },\n}\n\n// Tower Responses\n// prettier-ignore\nexport const TOWER_MESSAGES = {\n  TOWER_STATE: { name: \"Tower State\", value: 0, critical: false },\n  INVALID_STATE: { name: \"Invalid State\", value: 1, critical: true },\n  HARDWARE_FAILURE: { name: \"Hardware Failure\", value: 2, critical: true },\n  MECH_JIGGLE_TRIGGERED: { name: \"Unjam Jiggle Triggered\", value: 3, critical: false },\n  MECH_DURATION: { name: \"Rotation Duration\", value: 4, critical: false },\n  MECH_UNEXPECTED_TRIGGER: { name: \"Unexpected Trigger\", value: 5, critical: false },\n  DIFFERENTIAL_READINGS: { name: \"Diff Voltage Readings\", value: 6, critical: false },\n  BATTERY_READING: { name: \"Battery Level\", value: 7, critical: false },\n  CALIBRATION_FINISHED: { name: \"Calibration Finished\", value: 8, critical: false },\n}\n\n// 5% increments - voltages are in millivolts and typical for a 250mA discharge \n// at room temperature which roughly matches a single Energizer EN91\n// This is a rough approximation as chemical makeup of battieries have differing\n// battery performace (Alkaline vs NiMH vs Li etc).\nexport const VOLTAGE_LEVELS = [\n  1500, 1390, 1350, 1320, 1295, 1270, 1245, 1225, 1205,\n  1180, 1175, 1166, 1150, 1133, 1125, 1107, 1095, 1066, 1033,\n  980 // There's an additional 5% until 800mV is reached\n];", "import {\n  TOWER_COMMANDS,\n  TOWER_AUDIO_LIBRARY,\n  AUDIO_COMMAND_POS,\n  SKULL_DROP_COUNT_POS,\n  DRUM_PACKETS,\n  LIGHT_PACKETS,\n  DOORWAY_LIGHTS_TO_BIT_SHIFT,\n  BASE_LEDGE_LIGHTS_TO_BIT_SHIFT,\n  LIGHT_EFFECTS,\n  TOWER_LIGHT_SEQUENCES,\n  drumPositionCmds,\n  TOWER_DEVICE_NAME,\n  UART_SERVICE_UUID,\n  UART_TX_CHARACTERISTIC_UUID,\n  UART_RX_CHARACTERISTIC_UUID,\n  TC,\n  TOWER_MESSAGES,\n  VOLTAGE_LEVELS,\n  type Lights,\n  type TowerSide,\n  type TowerLevels,\n  type LedgeLight,\n  type DoorwayLight,\n  type RotateCommand,\n  type CommandPacket\n} from './constants';\n\n/**\n * @title UltimateDarkTower\n * @notes\n * The UltimateDarkTower class represents a control interface for the Return To Dark Tower device.\n * It provides methods for calibrating the tower, playing sounds, controlling lights, \n * rotating the tower, and more.\n * The class also handles the Bluetooth connection to the tower device.\n * \n * Disconnect Detection Features:\n *    - Listens for GATT server disconnect events\n *    - Monitors connection health with configurable heartbeat checks\n *    - Uses battery status (sent every ~200ms) as primary heartbeat for disconnect detection\n *    - Detects timeouts when no responses are received\n *    - Handles Bluetooth availability changes\n *    - Provides callback notifications for all disconnect scenarios\n *    - Battery heartbeat monitoring is ideal for detecting power loss/battery depletion\n * \n * Known Issues:\n *    Tower command complete response is not being considered. Async Await is working\n *    only on the fact that a command was sent, which is pretty much immediate, so we need\n *    to rework this a bit to take into account when a command is complete. This is all\n *    part of work still to be done.\n */\n\nclass UltimateDarkTower {\n  // ble\n  TowerDevice = null;\n  txCharacteristic = null;\n  rxCharacteristic = null;\n\n  // tower configuration\n  batteryNotifyFrequency: number = 15 * 1000; // App notification throttling (Tower sends every ~200ms)\n  batteryNotifyOnValueChangeOnly = false; // overrides frequency setting if true\n  retrySendCommandCount: number = 0;\n  retrySendCommandMax: number = 5;\n\n  // tower state\n  currentDrumPositions = { topMiddle: 0x10, bottom: 0x42 };\n  isCalibrated: boolean = false;\n  isConnected: boolean = false;\n  towerSkullDropCount: number = -1;\n  performingCalibration: boolean = false;\n  lastBatteryNotification: number = 0;\n  lastBatteryPercentage: string;\n\n  // disconnect detection\n  connectionMonitorInterval: NodeJS.Timeout | null = null;\n  connectionMonitorFrequency: number = 2 * 1000; // Check every 2 seconds (more frequent due to battery heartbeat)\n  lastSuccessfulCommand: number = 0;\n  connectionTimeoutThreshold: number = 30 * 1000; // 30 seconds without response\n  enableConnectionMonitoring: boolean = true;\n\n  // battery-based heartbeat detection\n  lastBatteryHeartbeat: number = 0; // Last time we received a battery status\n  batteryHeartbeatTimeout: number = 3 * 1000; // 3 seconds without battery = likely disconnected (normal is ~200ms)\n  calibrationHeartbeatTimeout: number = 30 * 1000; // 30 seconds during calibration (calibration blocks battery responses)\n  enableBatteryHeartbeatMonitoring: boolean = true;\n\n  // call back functions\n  // you overwrite these with your own functions \n  // to handle these events in your app\n  onCalibrationComplete = () => { };\n  onSkullDrop = (towerSkullCount: number) => { };\n  onBatteryLevelNotify = (millivolts: number) => { };\n  onTowerConnect = () => { };\n  onTowerDisconnect = () => { };\n\n  // utility\n  logDetail = false;\n  logTowerResponses = true;\n\n  // allows you to log specific responses\n  // [Differential Readings] & [Battery] are sent continously so\n  // setting their defaults to false.\n  logTowerResponseConfig = {\n    TOWER_STATE: true,\n    INVALID_STATE: true,\n    HARDWARE_FAILURE: true,\n    MECH_JIGGLE_TRIGGERED: true,\n    MECH_UNEXPECTED_TRIGGER: true,\n    MECH_DURATION: true,\n    DIFFERENTIAL_READINGS: false,\n    BATTERY_READING: true,\n    CALIBRATION_FINISHED: true,\n    LOG_ALL: false, // overrides individual\n  }\n\n  //#region Tower Commands \n  async calibrate() {\n    if (!this.performingCalibration) {\n      console.log('[UDT] Performing Tower Calibration');\n      await this.sendTowerCommand(new Uint8Array([TOWER_COMMANDS.calibration]));\n\n      // flag to look for calibration complete tower response\n      this.performingCalibration = true;\n      return;\n    }\n\n    console.log('[UDT] Tower calibration requested when tower is already performing calibration');\n    return;\n  }\n\n  //TODO: currently not working - investigating\n  async requestTowerState() {\n    console.log('[UDT] Requesting Tower State');\n    await this.sendTowerCommand(new Uint8Array([TOWER_COMMANDS.towerState]));\n  }\n\n  async playSound(soundIndex: number) {\n    const invalidIndex = soundIndex === null || soundIndex > (Object.keys(TOWER_AUDIO_LIBRARY).length) || soundIndex <= 0\n    if (invalidIndex) {\n      console.log('[UDT] attempt to play invalid sound index', soundIndex)\n      return;\n    }\n\n    const soundCommand = this.createSoundCommand(soundIndex);\n    this.updateCommandWithCurrentDrumPositions(soundCommand);\n\n    console.log('[UDT] Sending sound command');\n    await this.sendTowerCommand(soundCommand);\n  }\n\n  async Lights(lights: Lights) {\n    const lightCommand = this.createLightPacketCommand(lights);\n    this.updateCommandWithCurrentDrumPositions(lightCommand);\n\n    this.logDetail && console.log('[UDT] Light Parameter', lights);\n    console.log('[UDT] Sending light command');\n    await this.sendTowerCommand(lightCommand);\n  }\n\n  async lightOverrides(light: number, soundIndex?: number) {\n    const lightOverrideCommand = this.createLightOverrideCommand(light);\n    this.updateCommandWithCurrentDrumPositions(lightOverrideCommand);\n    if (soundIndex) {\n      lightOverrideCommand[AUDIO_COMMAND_POS] = soundIndex;\n    }\n\n    console.log('[UDT] Sending light override' + (soundIndex ? ' with sound' : ''));\n    await this.sendTowerCommand(lightOverrideCommand);\n  }\n\n  async Rotate(top: TowerSide, middle: TowerSide, bottom: TowerSide, soundIndex?: number) {\n    this.logDetail && console.log(`[UDT] Rotate Parameter TMB[${JSON.stringify(top)}|${middle}|${bottom}] S[${soundIndex}]`);\n\n    const rotateCommand = this.createRotateCommand(top, middle, bottom);\n\n    if (soundIndex) {\n      rotateCommand[AUDIO_COMMAND_POS] = soundIndex;\n    }\n\n    console.log('[UDT] Sending rotate command' + (soundIndex ? ' with sound' : ''));\n    await this.sendTowerCommand(rotateCommand);\n\n    // saving drum positions\n    this.currentDrumPositions = {\n      topMiddle: rotateCommand[DRUM_PACKETS.topMiddle],\n      bottom: rotateCommand[DRUM_PACKETS.bottom]\n    };\n  }\n\n  async MultiCommand(rotate?: RotateCommand, lights?: Lights, soundIndex?: number) {\n    this.logDetail && console.log('[UDT] MultiCommand Parameters', rotate, lights, soundIndex);\n    let multiCmd = new Uint8Array(20);\n    const rotateCmd = this.createRotateCommand(rotate.top, rotate.middle, rotate.bottom);\n    const lightCmd = this.createLightPacketCommand(lights);\n\n    // combine commands into single command packet\n    for (let index = 0; index < 20; index++) {\n      multiCmd[index] = rotateCmd[index] | lightCmd[index];\n    }\n\n    // add sound\n    if (soundIndex) {\n      const soundCmd = this.createSoundCommand(soundIndex);\n      multiCmd[AUDIO_COMMAND_POS] = multiCmd[AUDIO_COMMAND_POS] | soundCmd[AUDIO_COMMAND_POS];\n    }\n\n    this.sendTowerCommand(multiCmd);\n\n    const packetMsg = this.commandToPacketString(multiCmd);\n    console.log('[UDT] multiple command sent', packetMsg);\n  }\n\n  async resetTowerSkullCount() {\n    console.log('[UDT] Tower skull count reset requested');\n    await this.sendTowerCommand(new Uint8Array([TOWER_COMMANDS.resetCounter]));\n  }\n\n  //#endregion\n\n  //#region future features \n  async breakSeal(seal: Array<number> | number) {\n    // seals are numbered 1 - 12 with 1/5/8 representing north positions\n    // Top: 1-4, Middle: 5-8, Bottom: 9-12\n\n    const sealNumbers = Array.isArray(seal) ? seal : [seal];\n\n    // Define seal to side mapping based on 1/5/8 being north positions\n    const SEAL_TO_SIDE: { [key: number]: TowerSide } = {\n      1: 'north', 2: 'east', 3: 'south', 4: 'west',    // Top level\n      5: 'north', 6: 'east', 7: 'south', 8: 'west',    // Middle level  \n      9: 'north', 10: 'east', 11: 'south', 12: 'west'  // Bottom level\n    };\n\n    const SEAL_TO_LEVEL: { [key: number]: TowerLevels } = {\n      1: 'top', 2: 'top', 3: 'top', 4: 'top',\n      5: 'middle', 6: 'middle', 7: 'middle', 8: 'middle',\n      9: 'bottom', 10: 'bottom', 11: 'bottom', 12: 'bottom'\n    };\n\n    // Validate seal numbers\n    for (const sealNum of sealNumbers) {\n      if (sealNum < 1 || sealNum > 12) {\n        console.log(`[UDT] Invalid seal number: ${sealNum}. Seals must be 1-12.`);\n        return;\n      }\n    }\n\n    // Play tower seal sound\n    console.log('[UDT] Playing tower seal sound');\n    await this.playSound(TOWER_AUDIO_LIBRARY.TowerSeal.value);\n\n    // Get unique sides that need ledge lighting\n    const sidesWithBrokenSeals = [...new Set(sealNumbers.map(sealNum => SEAL_TO_SIDE[sealNum]))];\n\n    // Light both the primary ledge and adjacent ledge for each side with broken seals\n    // This ensures both left and right ledge lights are activated for each side\n    const ledgeLights: LedgeLight[] = [];\n    const adjacentSides: { [key in TowerSide]: TowerSide } = {\n      north: 'east',\n      east: 'south',\n      south: 'west',\n      west: 'north'\n    };\n\n    sidesWithBrokenSeals.forEach(side => {\n      ledgeLights.push({ position: side, style: 'on' });\n      ledgeLights.push({ position: adjacentSides[side], style: 'on' });\n    });\n\n    // Remove duplicates if any\n    const uniqueLedgeLights = ledgeLights.filter((light, index, self) =>\n      index === self.findIndex(l => l.position === light.position)\n    );\n\n    // Create doorway lights with breath effect for each broken seal\n    const doorwayLights: DoorwayLight[] = sealNumbers.map(sealNum => ({\n      level: SEAL_TO_LEVEL[sealNum],\n      position: SEAL_TO_SIDE[sealNum],\n      style: 'breatheFast'\n    }));\n\n    const lights: Lights = {\n      ledge: uniqueLedgeLights,\n      doorway: doorwayLights\n    };\n\n    console.log(`[UDT] Breaking seal(s) ${sealNumbers.join(', ')} - lighting ledges and doorways with breath effect`);\n    await this.Lights(lights);\n  }\n\n  // TODO: Implement function\n  randomizeLevels(level: number = 0) {\n    // 0 = all, 1 = top, 2 = middle, 3 = bottom\n    // 4 = top & middle, 5 = top & bottom, 6 = middle & bottom\n  }\n  //#endregion\n\n  //#region bluetooth\n\n  async connect() {\n    console.log(\"[UDT] Looking for Tower...\");\n    try {\n      // @ts-ignore\n      this.TowerDevice = await navigator.bluetooth.requestDevice({\n        filters: [{ namePrefix: TOWER_DEVICE_NAME }],\n        optionalServices: [UART_SERVICE_UUID]\n      });\n\n      if (this.TowerDevice === null) {\n        console.log(\"[UDT] Tower not found\");\n        return\n      }\n\n      // @ts-ignore\n      navigator.bluetooth.addEventListener(\"availabilitychanged\", this.bleAvailabilityChange);\n\n      console.log(\"[UDT] Connecting to Tower GATT Server...\");\n      const server = await this.TowerDevice.gatt.connect();\n\n      console.log(\"[UDT] Getting Tower Primary Service...\");\n      const service = await server.getPrimaryService(UART_SERVICE_UUID);\n\n      console.log(\"[UDT] Getting Tower Characteristics...\");\n      this.txCharacteristic = await service.getCharacteristic(\n        UART_TX_CHARACTERISTIC_UUID\n      );\n\n      this.rxCharacteristic = await service.getCharacteristic(\n        UART_RX_CHARACTERISTIC_UUID\n      );\n\n      console.log(\"[UDT] Subscribing to Tower...\");\n      await this.rxCharacteristic.startNotifications();\n      await this.rxCharacteristic.addEventListener(\n        \"characteristicvaluechanged\",\n        this.onRxCharacteristicValueChanged\n      );\n\n      // Add disconnect detection\n      this.TowerDevice.addEventListener('gattserverdisconnected', this.onTowerDeviceDisconnected);\n\n      console.log('[UDT] Tower connection complete');\n      this.isConnected = true;\n      this.lastSuccessfulCommand = Date.now();\n      this.lastBatteryHeartbeat = Date.now(); // Initialize battery heartbeat\n\n      // Start connection monitoring\n      if (this.enableConnectionMonitoring) {\n        this.startConnectionMonitoring();\n      }\n\n      this.onTowerConnect();\n    } catch (error) {\n      console.log('[UDT] Tower Connection Error', error);\n      this.isConnected = false;\n      this.onTowerDisconnect();\n    }\n  }\n\n  // handle tower response\n  onRxCharacteristicValueChanged = (event) => {\n    // Update last successful command timestamp\n    this.lastSuccessfulCommand = Date.now();\n\n    // convert data to byte array\n    // @ts-ignore-next-line\n    let receivedData = <Uint8Array>[];\n    for (var i = 0; i < event.target.value.byteLength; i++) {\n      receivedData[i] = event.target.value.getUint8(i);\n    }\n    const { cmdKey } = this.getTowerCommand(receivedData[0]);\n\n    // log response\n    if (this.logTowerResponses) {\n      this.logTowerResponse(receivedData);\n    }\n\n    // tower state response check\n    const isCommandTowerState = cmdKey === TC.STATE;\n    if (isCommandTowerState) {\n      this.handleTowerStateResponse(receivedData);\n    };\n\n    // battery \n    const isBatteryResponse = cmdKey === TC.BATTERY;\n    if (isBatteryResponse) {\n      // Update battery heartbeat - this is our most reliable connection indicator\n      this.lastBatteryHeartbeat = Date.now();\n\n      const millivolts = this.getMilliVoltsFromTowerReponse(receivedData);\n      const batteryPercentage = this.millVoltsToPercentage(millivolts);\n      const didBatteryLevelChange = this.lastBatteryPercentage !== batteryPercentage;\n      const batteryNotifyFrequencyPassed = ((Date.now() - this.lastBatteryNotification) >= this.batteryNotifyFrequency);\n\n      const shouldNotify = this.batteryNotifyOnValueChangeOnly ?\n        didBatteryLevelChange :\n        batteryNotifyFrequencyPassed;\n\n      if (shouldNotify) {\n        console.log('[UDT] Tower response: ', ...this.commandToString(receivedData));\n        this.lastBatteryNotification = Date.now();\n        this.lastBatteryPercentage = batteryPercentage;\n        this.onBatteryLevelNotify(millivolts);\n      }\n    }\n  }\n\n  private handleTowerStateResponse(receivedData: Uint8Array) {\n    const { cmdKey, command } = this.getTowerCommand(receivedData[0]);\n    const dataSkullDropCount = receivedData[SKULL_DROP_COUNT_POS];\n\n    // check to see if the response for a calibration request\n    if (this.performingCalibration) {\n      this.performingCalibration = false;\n      this.isCalibrated = true;\n      // Reset battery heartbeat timer since calibration blocks battery updates\n      // and it may take time for them to resume\n      this.lastBatteryHeartbeat = Date.now();\n      this.onCalibrationComplete();\n      console.log('[UDT] Tower calibration complete');\n    }\n\n    // skull drop check\n    // Note: If IR triggers when tower is disconnected it will result in tower sending\n    // skull count when tower is reconnected.\n    if (dataSkullDropCount !== this.towerSkullDropCount) {\n      // don't trigger if skull count is zero, this can happen if the tower is power cycled\n      // or when a 'reset' command is sent.\n      if (!!dataSkullDropCount) {\n        this.onSkullDrop(dataSkullDropCount);\n        console.log(`[UDT] Skull drop detected: app:${this.towerSkullDropCount < 0 ? 'empty' : this.towerSkullDropCount}  tower:${dataSkullDropCount}`);\n      } else {\n        console.log(`[UDT] Skull count reset to ${dataSkullDropCount}`);\n      }\n      this.towerSkullDropCount = dataSkullDropCount;\n    }\n  }\n\n  private logTowerResponse(receivedData: Uint8Array) {\n    const { cmdKey, command } = this.getTowerCommand(receivedData[0]);\n    const logAll = this.logTowerResponseConfig[\"LOG_ALL\"];\n    let canLogThisResponse = this.logTowerResponseConfig[cmdKey] || logAll;\n\n    // in case a command is not known we want to capture its occurance\n    if (!cmdKey) {\n      canLogThisResponse = true;\n    }\n\n    if (!canLogThisResponse) {\n      return;\n    }\n\n    const isBatteryResponse = cmdKey === TC.BATTERY;\n    if (isBatteryResponse) {\n      return; // logged elsewhere\n    }\n\n    console.log('[UDT] Tower response:', ...this.commandToString(receivedData));\n  }\n\n  async disconnect() {\n    if (!this.TowerDevice) {\n      return;\n    }\n\n    // Stop monitoring before disconnecting\n    this.stopConnectionMonitoring();\n\n    if (this.TowerDevice.gatt.connected) {\n      // Remove event listener before disconnecting\n      this.TowerDevice.removeEventListener('gattserverdisconnected', this.onTowerDeviceDisconnected);\n\n      await this.TowerDevice.gatt.disconnect();\n      console.log(\"[UDT] Tower disconnected\");\n      this.handleDisconnection();\n    }\n  }\n\n  bleAvailabilityChange = (event) => {\n    console.log('[UDT] Bluetooth availability changed', event);\n    const availability = event.value;\n\n    if (!availability && this.isConnected) {\n      console.log('[UDT] Bluetooth became unavailable - handling disconnection');\n      this.handleDisconnection();\n    }\n  }\n\n  // Handle device disconnection\n  onTowerDeviceDisconnected = (event) => {\n    console.log('[UDT] Tower device disconnected unexpectedly');\n    this.handleDisconnection();\n  }\n\n  private handleDisconnection() {\n    this.isConnected = false;\n    this.isCalibrated = false;\n    this.performingCalibration = false;\n    this.stopConnectionMonitoring();\n\n    // Reset heartbeat tracking\n    this.lastBatteryHeartbeat = 0;\n    this.lastSuccessfulCommand = 0;\n\n    // Clean up characteristics\n    this.txCharacteristic = null;\n    this.rxCharacteristic = null;\n\n    this.onTowerDisconnect();\n  }\n\n  private startConnectionMonitoring() {\n    if (this.connectionMonitorInterval) {\n      clearInterval(this.connectionMonitorInterval);\n    }\n\n    this.connectionMonitorInterval = setInterval(() => {\n      this.checkConnectionHealth();\n    }, this.connectionMonitorFrequency);\n  }\n\n  private stopConnectionMonitoring() {\n    if (this.connectionMonitorInterval) {\n      clearInterval(this.connectionMonitorInterval);\n      this.connectionMonitorInterval = null;\n    }\n  }\n\n  private checkConnectionHealth() {\n    if (!this.isConnected || !this.TowerDevice) {\n      return;\n    }\n\n    // Check if device is still connected at GATT level\n    if (!this.TowerDevice.gatt.connected) {\n      console.log('[UDT] GATT connection lost detected during health check');\n      this.handleDisconnection();\n      return;\n    }\n\n    // PRIMARY CHECK: Battery heartbeat monitoring (most reliable)\n    // Tower sends battery status every ~200ms, so if we haven't received one in 3+ seconds,\n    // the tower is likely disconnected (probably due to battery depletion)\n    // Exception: During calibration, use longer timeout as tower doesn't send battery updates\n    if (this.enableBatteryHeartbeatMonitoring) {\n      const timeSinceLastBatteryHeartbeat = Date.now() - this.lastBatteryHeartbeat;\n      const timeoutThreshold = this.performingCalibration ? this.calibrationHeartbeatTimeout : this.batteryHeartbeatTimeout;\n\n      if (timeSinceLastBatteryHeartbeat > timeoutThreshold) {\n        const operationContext = this.performingCalibration ? ' during calibration' : '';\n        console.log(`[UDT] Battery heartbeat timeout detected${operationContext} - no battery status received in ${timeSinceLastBatteryHeartbeat}ms (expected every ~200ms)`);\n\n        // During calibration, battery heartbeat timeouts are expected behavior, not actual disconnects\n        if (this.performingCalibration) {\n          console.log('[UDT] Ignoring battery heartbeat timeout during calibration - this is expected behavior');\n          return;\n        }\n\n        console.log('[UDT] Tower possibly disconnected due to battery depletion or power loss');\n        this.handleDisconnection();\n        return;\n      }\n    }\n\n    // SECONDARY CHECK: General command response timeout\n    // Check if we haven't received any response in a while\n    const timeSinceLastResponse = Date.now() - this.lastSuccessfulCommand;\n    if (timeSinceLastResponse > this.connectionTimeoutThreshold) {\n      console.log('[UDT] General connection timeout detected - no responses received');\n      // Try to request tower state as a heartbeat\n      this.requestTowerState().catch(() => {\n        console.log('[UDT] Heartbeat failed - connection appears lost');\n        this.handleDisconnection();\n      });\n    }\n  }\n  //#endregion\n\n  //#region utility\n\n  async sendTowerCommand(command: Uint8Array) {\n    try {\n      const cmdStr = this.commandToPacketString(command);\n      this.logDetail && console.log('[UDT] packet(s) sent:', cmdStr);\n      if (!this.txCharacteristic || !this.isConnected) {\n        console.log('[UDT] Tower is not connected')\n        return;\n      }\n      await this.txCharacteristic.writeValue(command);\n      this.isConnected = true;\n      this.retrySendCommandCount = 0;\n      this.lastSuccessfulCommand = Date.now();\n    } catch (error) {\n      console.log('[UDT] command send error:', error);\n      const errorMsg = error?.message ?? new String(error);\n      const wasCancelled = errorMsg.includes('User cancelled');\n      const maxRetriesReached = this.retrySendCommandCount >= this.retrySendCommandMax;\n\n      // Check for disconnect indicators\n      const isDisconnected = errorMsg.includes('Cannot read properties of null') ||\n        errorMsg.includes('GATT Server is disconnected') ||\n        errorMsg.includes('Device is not connected') ||\n        !this.TowerDevice?.gatt?.connected;\n\n      if (isDisconnected) {\n        console.log('[UDT] Disconnect detected during command send');\n        this.handleDisconnection();\n        return;\n      }\n\n      if (!maxRetriesReached && this.isConnected && !wasCancelled) {\n        console.log(`[UDT] retrying tower command attempt ${this.retrySendCommandCount + 1}`);\n        this.retrySendCommandCount++;\n        setTimeout(() => {\n          this.sendTowerCommand(command);\n        }, 250 * this.retrySendCommandCount);\n      } else {\n        this.retrySendCommandCount = 0;\n      }\n    }\n  }\n\n  updateCommandWithCurrentDrumPositions(commandPacket: CommandPacket) {\n    commandPacket[DRUM_PACKETS.topMiddle] = this.currentDrumPositions.topMiddle;\n    commandPacket[DRUM_PACKETS.bottom] = this.currentDrumPositions.bottom;\n  }\n\n  createLightPacketCommand = (lights: Lights) => {\n    let packetPos = null;\n    const command = new Uint8Array(20);\n    const doorways = lights?.doorway;\n    const ledges = lights?.ledge;\n    const bases = lights?.base;\n\n    doorways && doorways.forEach(dlt => {\n      packetPos = LIGHT_PACKETS.doorway[dlt.level][dlt.position];\n      const shouldBitShift = DOORWAY_LIGHTS_TO_BIT_SHIFT.includes(dlt.position);\n      command[packetPos] += LIGHT_EFFECTS[`${dlt.style}`] * (shouldBitShift ? 0x10 : 0x1)\n    })\n\n    ledges && ledges.forEach(llt => {\n      packetPos = LIGHT_PACKETS.ledge[llt.position];\n      const shouldBitShift = BASE_LEDGE_LIGHTS_TO_BIT_SHIFT.includes(llt.position);\n      command[packetPos] += LIGHT_EFFECTS[`${llt.style}`] * (shouldBitShift ? 0x10 : 0x1)\n    })\n\n    bases && bases.forEach(blt => {\n      packetPos = LIGHT_PACKETS.base[blt.position.side][blt.position.level]\n      const shouldBitShift = BASE_LEDGE_LIGHTS_TO_BIT_SHIFT.includes(blt.position.side);\n      command[packetPos] += LIGHT_EFFECTS[`${blt.style}`] * (shouldBitShift ? 0x10 : 0x1)\n    })\n\n    return command;\n  }\n\n  createLightOverrideCommand(lightOverride: number) {\n    const lightOverrideCommand = new Uint8Array(20);\n    lightOverrideCommand[LIGHT_PACKETS.overrides] = lightOverride;\n    return lightOverrideCommand;\n  }\n\n  createRotateCommand(top: TowerSide, middle: TowerSide, bottom: TowerSide) {\n    const rotateCmd = new Uint8Array(20);\n    rotateCmd[DRUM_PACKETS.topMiddle] =\n      drumPositionCmds.top[top] | drumPositionCmds.middle[middle];\n    rotateCmd[DRUM_PACKETS.bottom] = drumPositionCmds.bottom[bottom];\n    return rotateCmd;\n  }\n\n  createSoundCommand(soundIndex: number) {\n    const soundCommand = new Uint8Array(20);\n    const sound = Number(\"0x\" + Number(soundIndex).toString(16).padStart(2, '0'));\n    soundCommand[AUDIO_COMMAND_POS] = sound;\n    return soundCommand;\n  }\n\n  // TODO: return parsed data values rather than raw packet values\n  commandToString(command: Uint8Array): Array<string> {\n    const cmdValue = command[0];\n\n    const { cmdKey, command: towerCommand } = this.getTowerCommand(cmdValue)\n    switch (cmdKey) {\n      case TC.STATE:\n      case TC.INVALID_STATE:\n      case TC.FAILURE:\n      case TC.JIGGLE:\n      case TC.UNEXPECTED:\n      case TC.DURATION:\n      case TC.DIFFERENTIAL:\n      case TC.CALIBRATION:\n        return [towerCommand.name, this.commandToPacketString(command)];\n      case TC.BATTERY:\n        const millivolts = this.getMilliVoltsFromTowerReponse(command);\n        const retval = [towerCommand.name, this.millVoltsToPercentage(millivolts)];\n        if (this.logDetail) {\n          retval.push(`${millivolts}mv`);\n          retval.push(this.commandToPacketString(command));\n        }\n        return retval;\n      default:\n        return [\"Unmapped Response!\", this.commandToPacketString(command)]\n    }\n  }\n\n  commandToPacketString(command: Uint8Array) {\n    let cmdStr = \"[\";\n    command.forEach(n => cmdStr += n.toString(16) + \",\");\n    cmdStr = cmdStr.slice(0, -1) + \"]\";\n    return cmdStr\n  }\n\n  getTowerCommand(cmdValue: number) {\n    const cmdKeys = Object.keys(TOWER_MESSAGES);\n    const cmdKey = cmdKeys.find(key => TOWER_MESSAGES[key].value === cmdValue);\n    const command = TOWER_MESSAGES[cmdKey]\n    return { cmdKey, command };\n  }\n\n  getMilliVoltsFromTowerReponse(command: Uint8Array): number {\n    const mv = new Uint8Array(4);\n    mv[0] = command[4];\n    mv[1] = command[3];\n    mv[3] = 0;\n    mv[4] = 0;\n    var view = new DataView(mv.buffer, 0);\n    return view.getUint32(0, true);\n  }\n\n  // Tower returns sum total battery level in millivolts\n  millVoltsToPercentage(mv: number) {\n    const batLevel = mv ? mv / 3 : 0; // lookup is based on sinlge AA\n    const levels = VOLTAGE_LEVELS.filter(v => batLevel >= v);\n    return `${levels.length * 5}%`;\n  };\n\n  //#endregion\n\n  //#region Connection Management\n\n  /**\n   * Enable or disable connection monitoring\n   * @param enabled - Whether to enable connection monitoring\n   */\n  setConnectionMonitoring(enabled: boolean) {\n    this.enableConnectionMonitoring = enabled;\n    if (enabled && this.isConnected) {\n      this.startConnectionMonitoring();\n    } else {\n      this.stopConnectionMonitoring();\n    }\n  }\n\n  /**\n   * Configure connection monitoring parameters\n   * @param frequency - How often to check connection (milliseconds)\n   * @param timeout - How long to wait for responses before considering connection lost (milliseconds)\n   */\n  configureConnectionMonitoring(frequency: number = 2000, timeout: number = 30000) {\n    this.connectionMonitorFrequency = frequency;\n    this.connectionTimeoutThreshold = timeout;\n\n    // Restart monitoring with new settings if currently enabled\n    if (this.enableConnectionMonitoring && this.isConnected) {\n      this.startConnectionMonitoring();\n    }\n  }\n\n  /**\n   * Configure battery heartbeat monitoring parameters\n   * Tower sends battery status every ~200ms, so this is the most reliable disconnect indicator\n   * @param enabled - Whether to enable battery heartbeat monitoring\n   * @param timeout - How long to wait for battery status before considering disconnected (milliseconds)\n   */\n  configureBatteryHeartbeatMonitoring(enabled: boolean = true, timeout: number = 3000) {\n    this.enableBatteryHeartbeatMonitoring = enabled;\n    this.batteryHeartbeatTimeout = timeout;\n  }\n\n  /**\n   * Check if the tower is currently connected\n   * @returns Promise<boolean> - True if connected and responsive\n   */\n  async isConnectedAndResponsive(): Promise<boolean> {\n    if (!this.isConnected || !this.TowerDevice?.gatt?.connected) {\n      return false;\n    }\n\n    try {\n      // Try to request tower state as a connectivity test\n      await this.requestTowerState();\n      return true;\n    } catch (error) {\n      console.log('[UDT] Connectivity test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get detailed connection status including heartbeat information\n   * @returns Object with connection details\n   */\n  getConnectionStatus() {\n    const now = Date.now();\n    const timeSinceLastBattery = this.lastBatteryHeartbeat ? now - this.lastBatteryHeartbeat : -1;\n    const timeSinceLastCommand = this.lastSuccessfulCommand ? now - this.lastSuccessfulCommand : -1;\n\n    return {\n      isConnected: this.isConnected,\n      isGattConnected: this.TowerDevice?.gatt?.connected || false,\n      isCalibrated: this.isCalibrated,\n      lastBatteryHeartbeatMs: timeSinceLastBattery,\n      lastCommandResponseMs: timeSinceLastCommand,\n      batteryHeartbeatHealthy: timeSinceLastBattery >= 0 && timeSinceLastBattery < this.batteryHeartbeatTimeout,\n      connectionMonitoringEnabled: this.enableConnectionMonitoring,\n      batteryHeartbeatMonitoringEnabled: this.enableBatteryHeartbeatMonitoring,\n      batteryHeartbeatTimeoutMs: this.batteryHeartbeatTimeout,\n      connectionTimeoutMs: this.connectionTimeoutThreshold\n    };\n  }\n  //#endregion\n\n  //#region cleanup\n\n  /**\n   * Clean up resources and disconnect properly\n   */\n  async cleanup() {\n    console.log('[UDT] Cleaning up UltimateDarkTower instance');\n\n    // Stop connection monitoring\n    this.stopConnectionMonitoring();\n\n    // Remove event listeners\n    if (this.TowerDevice) {\n      this.TowerDevice.removeEventListener('gattserverdisconnected', this.onTowerDeviceDisconnected);\n    }\n\n    // @ts-ignore\n    if (navigator.bluetooth) {\n      // @ts-ignore\n      navigator.bluetooth.removeEventListener(\"availabilitychanged\", this.bleAvailabilityChange);\n    }\n\n    // Disconnect if connected\n    if (this.isConnected) {\n      await this.disconnect();\n    }\n  }\n\n  //#endregion\n}\n\nexport default UltimateDarkTower;\n", "/**\n * UltimateDarkTower - Main entry point\n * Export the main class and constants for public use\n */\n\nexport { default as UltimateDarkTower } from './UltimateDarkTower';\nexport * from './constants';\n\n// For convenience, also export as default\nimport UltimateDarkTower from './UltimateDarkTower';\nexport default UltimateDarkTower;\n", "import UltimateDarkTower, {\n  type TowerSide,\n  type TowerLevels,\n  type DoorwayLight,\n  type LedgeLight,\n  type BaseLight,\n  type BaseLightLevel,\n  type Lights,\n  TOWER_AUDIO_LIBRARY,\n  TOWER_LIGHT_SEQUENCES,\n  LIGHT_EFFECTS\n} from '../../src';\n\nconst Tower = new UltimateDarkTower();\n\n// Expose constants globally for the inline script\n(window as any).TOWER_AUDIO_LIBRARY = TOWER_AUDIO_LIBRARY;\n(window as any).TOWER_LIGHT_SEQUENCES = TOWER_LIGHT_SEQUENCES;\n(window as any).LIGHT_EFFECTS = LIGHT_EFFECTS;\n// Expose Tower instance globally\n(window as any).Tower = Tower;\n\n// skull drop callback\nconst updateSkullDropCount = (count: number) => {\n  const el = document.getElementById(\"skull-count\");\n  if (el) {\n    el.innerText = count.toString();\n  }\n}\nTower.onSkullDrop = updateSkullDropCount;\n\nasync function connectToTower() {\n  await Tower.connect();\n}\n\nconst onTowerConnected = () => {\n  const el = document.getElementById(\"tower-connection-state\");\n  if (el) {\n    el.innerText = \"Tower Connected\"\n    el.style.background = 'rgb(2 255 14 / 30%)';\n  }\n}\nTower.onTowerConnect = onTowerConnected;\n\nconst onTowerDisconnected = () => {\n  const el = document.getElementById(\"tower-connection-state\");\n  if (el) {\n    el.innerText = \"Tower Disconnected\";\n    el.style.background = 'rgb(255 1 1 / 30%)';\n  }\n}\nTower.onTowerDisconnect = onTowerDisconnected;\n\nasync function calibrate() {\n  if (!Tower.isConnected) {\n    return;\n  }\n  await Tower.calibrate();\n  const el = document.getElementById(\"calibrating-message\");\n  if (el) {\n    el.classList.remove(\"hide\");\n  }\n}\n\nconst onCalibrationComplete = () => {\n  const el = document.getElementById(\"calibrating-message\");\n  if (el) {\n    el.classList.add(\"hide\");\n  }\n}\nTower.onCalibrationComplete = onCalibrationComplete;\n\nconst onBatteryLevelNotify = (millivolts: number) => {\n  const el = document.getElementById(\"battery\");\n  if (el) {\n    el.innerText = Tower.millVoltsToPercentage(millivolts).toString();\n  }\n}\nTower.onBatteryLevelNotify = onBatteryLevelNotify;\n\nasync function resetSkullCount() {\n  if (!Tower.isConnected) {\n    return;\n  }\n  Tower.resetTowerSkullCount();\n  updateSkullDropCount(0);\n}\n\nconst playSound = () => {\n  const select = document.getElementById(\"sounds\") as HTMLInputElement;\n  Tower.playSound(Number(select.value));\n}\n\nconst overrides = () => {\n  const select = document.getElementById(\"lightOverrideDropDown\") as HTMLInputElement;\n  Tower.lightOverrides(Number(select.value));\n}\n\nconst rotate = () => {\n  const top = document.getElementById(\"top\") as HTMLInputElement;\n  const middle = document.getElementById(\"middle\") as HTMLInputElement;\n  const bottom = document.getElementById(\"bottom\") as HTMLInputElement;\n  const sound = document.getElementById(\"sounds\") as HTMLInputElement;\n  Tower.Rotate(\n    top.value as TowerSide,\n    middle.value as TowerSide,\n    bottom.value as TowerSide, Number(sound.value)\n  );\n}\n\nconst breakSeal = async () => {\n  const select = document.getElementById(\"sealSelect\") as HTMLSelectElement;\n  const sealValue = select.value;\n  \n  if (!sealValue) {\n    console.log(\"No seal selected\");\n    return;\n  }\n  \n  // Map seal names to numbers (1-12 based on the UltimateDarkTower breakSeal method)\n  const sealMap: { [key: string]: number } = {\n    \"North Top\": 1,\n    \"East Top\": 2, \n    \"South Top\": 3,\n    \"West Top\": 4,\n    \"North Middle\": 5,\n    \"East Middle\": 6,\n    \"South Middle\": 7, \n    \"West Middle\": 8,\n    \"North Bottom\": 9,\n    \"East Bottom\": 10,\n    \"South Bottom\": 11,\n    \"West Bottom\": 12\n  };\n  \n  const sealNumber = sealMap[sealValue];\n  if (sealNumber) {\n    await Tower.breakSeal(sealNumber);\n  }\n}\n\nconst clearAllLights = async () => {\n  // Create lights object with all lights set to off\n  const allLightsOff: Lights = {\n    doorway: [\n      { position: 'north', level: 'top', style: 'off' },\n      { position: 'north', level: 'middle', style: 'off' },\n      { position: 'north', level: 'bottom', style: 'off' },\n      { position: 'east', level: 'top', style: 'off' },\n      { position: 'east', level: 'middle', style: 'off' },\n      { position: 'east', level: 'bottom', style: 'off' },\n      { position: 'south', level: 'top', style: 'off' },\n      { position: 'south', level: 'middle', style: 'off' },\n      { position: 'south', level: 'bottom', style: 'off' },\n      { position: 'west', level: 'top', style: 'off' },\n      { position: 'west', level: 'middle', style: 'off' },\n      { position: 'west', level: 'bottom', style: 'off' }\n    ],\n    ledge: [\n      { position: 'north', style: 'off' },\n      { position: 'east', style: 'off' },\n      { position: 'south', style: 'off' },\n      { position: 'west', style: 'off' }\n    ],\n    base: [\n      { position: { side: 'north', level: 'top' }, style: 'off' },\n      { position: { side: 'north', level: 'bottom' }, style: 'off' },\n      { position: { side: 'east', level: 'top' }, style: 'off' },\n      { position: { side: 'east', level: 'bottom' }, style: 'off' },\n      { position: { side: 'south', level: 'top' }, style: 'off' },\n      { position: { side: 'south', level: 'bottom' }, style: 'off' },\n      { position: { side: 'west', level: 'top' }, style: 'off' },\n      { position: { side: 'west', level: 'bottom' }, style: 'off' }\n    ]\n  };\n  \n  await Tower.Lights(allLightsOff);\n  console.log(\"All lights cleared\");\n}\n\nconst singleLight = (el: HTMLInputElement) => {\n  let style: string = \"off\";\n  if (el.checked) {\n    const ls = document.getElementById(\"lightStyles\") as HTMLSelectElement;\n    if (ls && ls.selectedIndex >= 0) {\n      style = ls.options[ls.selectedIndex].innerHTML;\n    }\n  }\n  el.setAttribute('data-light-style', style);\n  lights();\n}\n\nconst lights = () => {\n  const doorwayLights: Array<DoorwayLight> = getDoorwayLights();\n  const ledgeLights: Array<LedgeLight> = getLedgeLights();\n  const baseLights: Array<BaseLight> = getBaseLights();\n  const allLights = { doorway: doorwayLights, ledge: ledgeLights, base: baseLights };\n  Tower.Lights(allLights);\n}\n\nconst getDoorwayLights = (): Array<DoorwayLight> => {\n  const qs = 'input[type=\"checkbox\"][data-light-type=\"doorway\"]:checked'\n  const checked = document.querySelectorAll(qs) as NodeListOf<HTMLInputElement>;\n  const ls = document.getElementById(\"lightStyles\") as HTMLSelectElement;\n  const selectedLightStyle = ls?.options[ls.selectedIndex]?.textContent || \"off\";\n  let doorwayCmds: Array<DoorwayLight> = [];\n  Array.from(checked).forEach(cb => {\n    let { lightSide, lightStyle, lightLevel } = getDataAttributes(cb);\n    if (lightStyle !== selectedLightStyle) {\n      lightStyle = selectedLightStyle;\n      cb.setAttribute('data-light-style', lightStyle);\n    }\n    if (lightSide && lightLevel && lightStyle) {\n      doorwayCmds.push({ position: lightSide as TowerSide, level: lightLevel as TowerLevels, style: lightStyle });\n    }\n  });\n  return doorwayCmds;\n}\n\nconst getLedgeLights = (): Array<LedgeLight> => {\n  const qs = 'input[type=\"checkbox\"][data-light-type=\"ledge\"]:checked';\n  const checked = document.querySelectorAll(qs) as NodeListOf<HTMLInputElement>;\n  let ledgeCmds: Array<LedgeLight> = [];\n  Array.from(checked).forEach(cb => {\n    const { lightSide, lightStyle } = getDataAttributes(cb);\n    if (lightSide && lightStyle) {\n      ledgeCmds.push({ position: lightSide as TowerSide, style: lightStyle });\n    }\n  });\n  return ledgeCmds;\n}\n\nconst getBaseLights = (): Array<BaseLight> => {\n  const qs = 'input[type=\"checkbox\"][data-light-type=\"base\"]:checked';\n  const checked = document.querySelectorAll(qs) as NodeListOf<HTMLInputElement>;\n  let baseCmds: Array<BaseLight> = [];\n  Array.from(checked).forEach(cb => {\n    const { lightSide, lightStyle, lightBaseLocation } = getDataAttributes(cb);\n    if (lightSide && lightStyle && lightBaseLocation) {\n      baseCmds.push({\n        position: {\n          side: lightSide as TowerSide,\n          level: lightBaseLocation as BaseLightLevel\n        },\n        style: lightStyle\n      });\n    }\n  });\n\n  return baseCmds;\n}\n\nconst getDataAttributes = (el: HTMLElement) => {\n  const lightType = el.getAttribute('data-light-type');\n  const lightSide = el.getAttribute('data-light-location');\n  const lightLevel = el.getAttribute('data-light-level');\n  const lightBaseLocation = el.getAttribute('data-light-base-location');\n  const lightStyle = el.getAttribute('data-light-style');\n\n  return ({\n    lightSide: lightSide,\n    lightLevel: lightLevel,\n    lightBaseLocation: lightBaseLocation,\n    lightStyle: lightStyle,\n    lightType: lightType,\n  });\n}\n\n// Expose functions globally for HTML onclick handlers\n(window as any).connectToTower = connectToTower;\n(window as any).calibrate = calibrate;\n(window as any).resetSkullCount = resetSkullCount;\n(window as any).playSound = playSound;\n(window as any).singleLight = singleLight;\n(window as any).lights = lights;\n(window as any).overrides = overrides;\n(window as any).rotate = rotate;\n(window as any).breakSeal = breakSeal;\n(window as any).clearAllLights = clearAllLights;"],
  "mappings": "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",
  "names": ["lights", "rotate"]
}
